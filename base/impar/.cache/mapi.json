{
    "title": "@impar: \u00cdmpar ou par - OBI 2016 - F1P1",
    "description": "# \u00cdmpar ou par - OBI 2016 - F1P1\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/impar/cover.jpg)\n\n## Contexto\n\nDois amigos, Alice e Bob, est\u00e3o jogando um jogo muito simples, em que um deles grita ou \"par\" ou \"\u00edmpar\" e o outro imediatamente responde ao contr\u00e1rio, respectivamente \"\u00edmpar\" ou \"par\". Em seguida, ambos exibem ao mesmo tempo uma m\u00e3o cada um, em que alguns dedos est\u00e3o estendidos e outros dobrados. Ent\u00e3o eles contam o n\u00famero total de dedos estendidos. Se a soma for par, quem gritou \"par\" ganha. Se a soma for \u00edmpar, quem gritou \"\u00edmpar\" ganha.\n\n Por exemplo, suponhamos que a Alice gritou \"par\" e o Bob respondeu \"\u00edmpar\". Em seguida, Alice n\u00e3o deixou nenhum dos seus dedos estendidos, ao passo que Bob deixou tr\u00eas dedos estendidos. A soma ent\u00e3o \u00e9 tr\u00eas, que \u00e9 \u00edmpar, portanto Bob ganhou.\n\nSeu programa deve determinar quem ganhou, tendo a informa\u00e7\u00e3o de quem gritou par e o n\u00famero de dedos estendidos de cada um.\n\n### Entrada\n\n- Tr\u00eas linhas, onde:\n  - A primeira linha cont\u00e9m um inteiro ***P*** (0 ou 1):\n    - ***P = 0***: Alice gritou \"par\"\n    - ***P = 1***: Bob gritou \"par\"\n  - A segunda linha cont\u00e9m um inteiro ***D1***: n\u00famero de dedos estendidos por Alice\n  - A segunda linha cont\u00e9m um inteiro ***D1***: n\u00famero de dedos estendidos por Bob\n\n### Sa\u00edda\n\n- Um \u00fanico inteiro:\n  - 0 se Alice foi a ganhadora\n  - 1 se Bob foi o ganhador\n\n### Restri\u00e7\u00f5es\n\n- P = 0 ou P = 1\n- 0 \u2264 D\\_1 \u2264 5\n- 0 \u2264 D\\_2 \u2264 5\n\n## Testes\n\n``` py\n>>>>>>>> INSERT\n0\n0\n3\n======== EXPECT\n1\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n1\n0\n3\n======== EXPECT\n0\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n0\n1\n5\n======== EXPECT\n0\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n0\n0\n3\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1\n0\n3\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0\n1\n5\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n0\n3\n2\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n0\n0\n2\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n1\n3\n3\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07\n1\n0\n5\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 08\n0\n0\n4\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 09\n0\n3\n1\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 10\n0\n2\n4\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 11\n1\n0\n1\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 12\n0\n3\n4\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 13\n0\n1\n4\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 14\n0\n4\n5\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
