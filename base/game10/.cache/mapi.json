{
    "title": "Game10 - OBI 2017 - Fase 1 - Universit\u00e1rio",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>Game10 - OBI 2017 - Fase 1 - Universit\u00e1rio</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <script src=\"https://polyfill.io/v3/polyfill.min.js?features=es6\"></script>\n  <script\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js\"\n  type=\"text/javascript\"></script>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"game10---obi-2017---fase-1---universit\u00e1rio\">Game10 - OBI 2017 -\nFase 1 - Universit\u00e1rio</h1>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/game10/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<h2 id=\"contexto\">Contexto</h2>\n<p>No princ\u00edpio dos anos 1980 surgiram nos col\u00e9gios os primeiros\nrel\u00f3gios de pulso digitais com joguinhos. Era uma febre entre os alunos\ne quem tinha um era muito popular na hora do recreio. Os joguinhos eram\nbem simples, mas muito legais. Um dos primeiros era o Game-10, no qual\nvoc\u00ea controlava um avi\u00e3o que aparecia na parte direita do visor. Na\nparte esquerda aparecia um disco voador em qualquer uma de tr\u00eas\nposi\u00e7\u00f5es, aleatoriamente, e lan\u00e7ava um m\u00edssil. O objetivo do jogador era\nmovimentar o avi\u00e3o verticalmente para que ficasse na frente do disco\nvoador (na mesma linha horizontal, do lado direito) e atirar para\ninterceptar o m\u00edssil antes que esse atingisse o avi\u00e3o.</p>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/game10/figura.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<p>Como o movimento do avi\u00e3o era feito com apenas um bot\u00e3o, s\u00f3 dava para\nmovimentar em um sentido: ao apertar o bot\u00e3o sucessivas vezes, o avi\u00e3o\nse movia na sequ\u00eancia de posi\u00e7\u00f5es \u2026 1 \u2192 2 \u2192 3 \u2192 1 \u2192 2 \u2192 3 \u2192 1 \u2026</p>\n<p>Veja que, na situa\u00e7\u00e3o da figura, o jogador deveria apertar o bot\u00e3o\napenas uma vez, para ir da posi\u00e7\u00e3o 1 para a posi\u00e7\u00e3o 2, e conseguir\natirar e interceptar o m\u00edssil.</p>\n<p>Neste problema vamos considerar que existem N posi\u00e7\u00f5es e n\u00e3o apenas\ntr\u00eas. Dado o n\u00famero de posi\u00e7\u00f5es N, a posi\u00e7\u00e3o D na qual o disco voador\naparece, e a posi\u00e7\u00e3o A onde est\u00e1 o avi\u00e3o, seu programa deve computar o\nn\u00famero m\u00ednimo de vezes que o jogador precisa apertar o bot\u00e3o para\nmovimentar o avi\u00e3o at\u00e9 a mesma posi\u00e7\u00e3o do disco voador e poder\natirar!</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A entrada \u00e9 composta por tr\u00eas linhas:\n<ul>\n<li>Um n\u00famero inteiro \ud835\udc41 representando o n\u00famero de posi\u00e7\u00f5es no jogo.</li>\n<li>Um n\u00famero inteiro \ud835\udc37 representando a posi\u00e7\u00e3o do disco voador.</li>\n<li>Um n\u00famero inteiro \ud835\udc34 representando a posi\u00e7\u00e3o atual do avi\u00e3o.</li>\n</ul></li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>Seu programa deve imprimir uma linha contendo um inteiro, o n\u00famero\nm\u00ednimo de vezes que o jogador deve apertar o bot\u00e3o para poder\natirar.</li>\n</ul>\n<h3 id=\"restri\u00e7\u00f5es\">Restri\u00e7\u00f5es</h3>\n<ul>\n<li>3 \u2264 N \u2264 100</li>\n<li>1 \u2264 D,A \u2264 N</li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">3</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">2</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">20</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">8</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">13</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">15</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">3</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">2</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">2</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">0</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n<h2 id=\"dicas\">Dicas</h2>\n<p>O problema pode ser resolvido calculando a diferen\u00e7a c\u00edclica entre a\nposi\u00e7\u00e3o do disco voador \ud835\udc37 e a posi\u00e7\u00e3o do avi\u00e3o \ud835\udc34. A diferen\u00e7a pode ser\nobtida de duas maneiras:</p>\n<ul>\n<li>Movendo o avi\u00e3o de \ud835\udc34 at\u00e9 \ud835\udc37 diretamente.</li>\n<li>Dando uma volta completa no ciclo e contando quantos movimentos s\u00e3o\nnecess\u00e1rios.</li>\n</ul>\n<p>O n\u00famero de movimentos ser\u00e1 o menor valor entre essas duas\npossibilidades.</p>\n<p>O n\u00famero de movimentos necess\u00e1rios para mover o avi\u00e3o pode ser\ncalculado com a f\u00f3rmula:</p>\n<p><span class=\"math display\">\\[movimentos = (D - A + N) \\mod\nN\\]</span></p>\n<p>Isso garante que a contagem dos movimentos seja sempre positiva e\ndentro do intervalo das posi\u00e7\u00f5es dispon\u00edveis.</p>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n3\n2\n1\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n20\n8\n13\n======== EXPECT\n15\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3\n2\n2\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n3\n1\n3\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n5\n5\n2\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n7\n5\n7\n======== EXPECT\n5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07\n10\n8\n1\n======== EXPECT\n7\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
