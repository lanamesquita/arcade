{
    "title": "@c021arraysmultidimensionais: @c021arraysmultidimensionais",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@c021arraysmultidimensionais: @c021arraysmultidimensionais</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>@c021arraysmultidimensionais</h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<p><a href=\"https://github.com/qxcodefup/arcade/blob/master/base/c021arraysmultidimensionais/.cache/draft.c\">C\u00f3digo</a></p>\n<h2>Testes</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> \n<span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> \n<span class=\"mi\">7</span> <span class=\"mi\">8</span> <span class=\"mi\">9</span> \n\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\n1 2 3 \n4 5 6 \n7 8 9 \n\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n\n// Em C, podemos usar arrays multidimensionais (ou matrizes) para armazenar dados em formato de tabela.\n// Vamos declarar e inicializar uma matriz 3x3 (3 linhas e 3 colunas) e exibir os seus elementos.\n// OBS 1: Perceba que pra matrizes, sempre vamos usar dois iteradores 'for', um para as linhas, e outro para colunas.\n// OBS 2: vamos esquematizar da mesma forma da quest\u00e3o anterior uma matriz (que \u00e9 um detor de vetores no final das contas):\n//Assim como arrays comuns, os \u00edndices em uma matriz come\u00e7am em `0`.\n\n//Imagine uma matriz de inteiros com 3 linhas e 3 colunas:\n\n// Matriz 3x3 de inteiros:\n//                     [ 1,  2,  3 ]\n//                     [ 4,  5,  6 ]\n//                     [ 7,  8,  9 ]\n// Em rela\u00e7\u00e3o aos \u00edndices (linhas e colunas):\n//                    {matriz[0][0], matriz[0][1], matriz[0][2]}\n//                    {matriz[1][0], matriz[1][1], matriz[1][2]}\n//                    {matriz[2][0], matriz[2][1], matriz[2][2]}\n// Para o caso do numero 7, se l\u00ea matriz linha 2, coluna 0.\n\n\n\n// TODO: Declare uma matriz chamada `matriz` que:\n// - Tenha 3 linhas e 3 colunas.\n// - Seja inicializada com os seguintes valores:\n//   1 2 3\n//   4 5 6\n//   7 8 9\n\n// TODO: Crie uma fun\u00e7\u00e3o `imprimirMatriz` que:\n// - Receba como par\u00e2metros uma matriz 3x3 de inteiros.\n// - N\u00e3o retorne nada (`void`).\n// - Dentro da fun\u00e7\u00e3o, use loops `for` aninhados para exibir cada elemento da matriz em formato de tabela.\n\n// TODO: No `main`, chame a fun\u00e7\u00e3o `imprimirMatriz` para exibir os valores da matriz `matriz`.\n\nvoid imprimirMatriz(int m[3][3]) {\n    //DEL!\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%d \", m[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    //ACT!\n    // for (int i = 0; i < 3; i++) {\n    //     for (int j = 0; j < 3; j++) {\n    //         printf(\"%d \", m[???][???]);\n    //     }\n    //     printf(\"\\n\");\n    // }\n    //ADD!\n}\n\nint main() {\n    //Tamb\u00e9m podemos inicializar a matriz com valores pr\u00e9-definidos, basta atribuirmos os valores entre chaves \"{}\" para cada linha da matriz.\n    // Inicialize a matriz `matriz` com os valores fornecidos.\n    //DEL!\n    int matriz[3][3] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    //ACT!\n    // int matriz[???][???] = {\n    //     {???, ???, ???},\n    //     {???, ???, ???},\n    //     {???, ???, ???}\n    // };\n    //ADD!\n    \n    // Chame a fun\u00e7\u00e3o `imprimirMatriz` para exibir os valores da matriz.\n    //DEL!\n    imprimirMatriz(matriz);\n    //ACT!\n    // imprimirMatriz();\n    //ADD!\n    \n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
