{
    "title": "@c021arraysmultidimensionais: @c021arraysmultidimensionais",
    "description": "# @c021arraysmultidimensionais\n\nDescri\u00e7\u00e3o no c\u00f3digo.\n\n[C\u00f3digo](https://github.com/qxcodefup/arcade/blob/master/base/c021arraysmultidimensionais/.cache/draft.c)\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n======== EXPECT\n1 2 3 \n4 5 6 \n7 8 9 \n\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\n1 2 3 \n4 5 6 \n7 8 9 \n\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n\n// Em C, podemos usar arrays multidimensionais (ou matrizes) para armazenar dados em formato de tabela.\n// Vamos declarar e inicializar uma matriz 3x3 (3 linhas e 3 colunas) e exibir os seus elementos.\n// OBS 1: Perceba que pra matrizes, sempre vamos usar dois iteradores 'for', um para as linhas, e outro para colunas.\n// OBS 2: vamos esquematizar da mesma forma da quest\u00e3o anterior uma matriz (que \u00e9 um detor de vetores no final das contas):\n//Assim como arrays comuns, os \u00edndices em uma matriz come\u00e7am em `0`.\n\n//Imagine uma matriz de inteiros com 3 linhas e 3 colunas:\n\n// Matriz 3x3 de inteiros:\n//                     [ 1,  2,  3 ]\n//                     [ 4,  5,  6 ]\n//                     [ 7,  8,  9 ]\n// Em rela\u00e7\u00e3o aos \u00edndices (linhas e colunas):\n//                    {matriz[0][0], matriz[0][1], matriz[0][2]}\n//                    {matriz[1][0], matriz[1][1], matriz[1][2]}\n//                    {matriz[2][0], matriz[2][1], matriz[2][2]}\n// Para o caso do numero 7, se l\u00ea matriz linha 2, coluna 0.\n\n\n\n// TODO: Declare uma matriz chamada `matriz` que:\n// - Tenha 3 linhas e 3 colunas.\n// - Seja inicializada com os seguintes valores:\n//   1 2 3\n//   4 5 6\n//   7 8 9\n\n// TODO: Crie uma fun\u00e7\u00e3o `imprimirMatriz` que:\n// - Receba como par\u00e2metros uma matriz 3x3 de inteiros.\n// - N\u00e3o retorne nada (`void`).\n// - Dentro da fun\u00e7\u00e3o, use loops `for` aninhados para exibir cada elemento da matriz em formato de tabela.\n\n// TODO: No `main`, chame a fun\u00e7\u00e3o `imprimirMatriz` para exibir os valores da matriz `matriz`.\n\nvoid imprimirMatriz(int m[3][3]) {\n    //DEL!\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%d \", m[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    //ACT!\n    // for (int i = 0; i < 3; i++) {\n    //     for (int j = 0; j < 3; j++) {\n    //         printf(\"%d \", m[???][???]);\n    //     }\n    //     printf(\"\\n\");\n    // }\n    //ADD!\n}\n\nint main() {\n    //Tamb\u00e9m podemos inicializar a matriz com valores pr\u00e9-definidos, basta atribuirmos os valores entre chaves \"{}\" para cada linha da matriz.\n    // Inicialize a matriz `matriz` com os valores fornecidos.\n    //DEL!\n    int matriz[3][3] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    //ACT!\n    // int matriz[???][???] = {\n    //     {???, ???, ???},\n    //     {???, ???, ???},\n    //     {???, ???, ???}\n    // };\n    //ADD!\n    \n    // Chame a fun\u00e7\u00e3o `imprimirMatriz` para exibir os valores da matriz.\n    //DEL!\n    imprimirMatriz(matriz);\n    //ACT!\n    // imprimirMatriz();\n    //ADD!\n    \n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
