{
    "title": "@round: Arredondar n\u00famero",
    "description": "# Arredondar n\u00famero\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/round/cover.jpg)\n\n## Contexto\n\nUm aluno ficou implorando para o seu professor de FUP arredondar seu 6.9999999999 para 10 porque ele precisa de um 10 para passar de semestre. Seu trabalho \u00e9 implementar as fun\u00e7\u00f5es ceil, floor e round para ajudar o professor a calcular as notas dos alunos.\n\nimplemente tr\u00eas fun\u00e7\u00f5es:\n\n- `ceil`: que sempre arredonda para cima\n- `floor` que sempre arredonda para baixo\n- `round`: que arredonda para baixo se a parte fracion\u00e1ria for menor que 0.5 e para cima se for maior ou igual a 0.5.\n\nOs prot\u00f3tipos das fun\u00e7\u00f5es s\u00e3o em **C**:\n\n```c\nint round(float num);\nint floor(float num);\nint ceil(float num);\n```\n\nNa fun\u00e7\u00e3o principal (main), leia um caractere que representa a opera\u00e7\u00e3o (r, f, c) e um n\u00famero do tipo float. Depois, chame a fun\u00e7\u00e3o correspondente e imprima o resultado.\n\n### Entrada\n\n- Um caractere (r, f ou c) representando a opera\u00e7\u00e3o.\n- Um n\u00famero float\n\n### Saida\n\n- imprima um inteiro de acordo com a opera\u00e7\u00e3o pedida.  \n\n## Testes\n\n``` py\n>>>>>>>> INSERT\nc\n5.5\n======== EXPECT\n6\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\nf\n6.99\n======== EXPECT\n6\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\nc\n6.99\n======== EXPECT\n7\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\nr\n5.5\n======== EXPECT\n6\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\nr\n5.4\n======== EXPECT\n5\n<<<<<<<< FINISH\n```\n\n## Dicas\n\n### Programando em: C\n\n- \u00c9 dessa forma que \u00e9 realizada a cria\u00e7\u00e3o de uma fun\u00e7\u00e3o:\n\n```c\nint round(float num){\n    return;\n}\n\nint main() {\n    float num = 1.1;\n    round(num);\n}\n```\n\n### Programando em: Python\n\n- \u00c9 dessa forma que \u00e9 realizada a cria\u00e7\u00e3o de uma fun\u00e7\u00e3o:\n\n```py\ndef round(float num):\n    return\n\nnum = 1.1;\nround(num);\n```\n\n### Programando em: TypeScript\n\n- \u00c9 dessa forma que \u00e9 realizada a cria\u00e7\u00e3o de uma fun\u00e7\u00e3o:\n\n```ts\nfunction round(num: number): number{\n    return;\n}\n\nlet num = 1.1;\nround(num);\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\nc\n5.5\n======== EXPECT\n6\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\nf\n6.99\n======== EXPECT\n6\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\nc\n6.99\n======== EXPECT\n7\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\nr\n5.5\n======== EXPECT\n6\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\nr\n5.4\n======== EXPECT\n5\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\nc\n0.5\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07\nf\n6.7\n======== EXPECT\n6\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 08\nf\n0.5\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 09\nr\n7.3\n======== EXPECT\n7\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 10\nr\n7.5\n======== EXPECT\n8\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 11\nf\n3.33\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 12\nr\n9.7\n======== EXPECT\n10\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
