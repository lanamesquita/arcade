{
    "title": "@bhaskara: Usando biblioteca matem\u00e1tica",
    "description": "# Usando biblioteca matem\u00e1tica\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/bhaskara/cover.jpg)\n\n## Contexto\n\nN\u00e3o sei se voc\u00ea amava ou odiava o tal do Bhaskara por inventar aquela f\u00f3rmula das ra\u00edzes. Agora \u00e9 hora de implementar aquela conta pra nunca ter mais que fazer na m\u00e3o.\n\nFormula de bhaskara:\n\n$$x = \\frac{-b \\pm \\sqrt{\\Delta}}{2a}$$\n\nC\u00e1lculo do Delta:\n\n$$\\Delta = b^2 - 4ac$$\n\nDados os valores de A, B e C, calcule as ra\u00edzes.\n\n### Entrada\n\n- Valores de A, B e C em ponto flutuante, um por linha.\n\n### Sa\u00edda\n\n- Caso \u0394 seja positivo: exiba as duas ra\u00edzes com duas casas decimais, uma em cada linha.\n- Caso \u0394 seja igual a zero: exiba a \u00fanica raiz com duas casas decimais.\n- Caso \u0394 seja negativo: exiba a mensagem \"nao ha raiz real\".\n\n## Exemplos\n\n``` py\n>>>>>>>> INSERT duas ra\u00edzes\n5.4\n25.0\n-12.0\n======== EXPECT\n0.44\n-5.07\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT duas ra\u00edzes\n3.0\n-7.0\n4.0\n======== EXPECT\n1.33\n1.00\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT uma raiz\n9.0\n-12.0\n4.0\n======== EXPECT\n0.67\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT sem ra\u00edzes\n5.0\n3.0\n5.0\n======== EXPECT\nnao ha raiz real\n<<<<<<<< FINISH\n```\n\n## Dicas\n\n### Programando em: C\n\n- Para exibir um n\u00famero de ponto flutuante, do tipo `float` com uma casa decimal em C, utilize o especificador de formato `%.1f` na fun\u00e7\u00e3o `printf`. O n\u00famero **1** ap\u00f3s o ponto indica a quantidade de casas decimais a serem exibidas.\n\n```c\nint main() {\n    float resultado;\n    printf(\"%.1f\\n\", resultado);\n}\n```\n\n- Para calcular a raiz quadrada em C, voc\u00ea deve incluir a biblioteca `math.h` em seu projeto e utilizar a fun\u00e7\u00e3o `sqrt()` passando como argumento o valor do qual deseja encontrar a raiz.\n\n```c\n#include <math.h>\nint main() {\n    raiz = sqtr(numero);\n}\n```\n\n- A fun\u00e7\u00e3o `pow()` da biblioteca `math.h` \u00e9 a maneira mais direta de elevar um n\u00famero a qualquer pot\u00eancia em C. Para elevar um n\u00famero ao quadrado, basta passar o n\u00famero como primeiro argumento e **2** como segundo argumento.\n\n```c\n#include <math.h>\nint main() {\n    quadrado = pow(numero, 2);\n}\n```\n\n### Programando em: Python\n\n- Para exibir um n\u00famero de ponto flutuante com uma casa decimal em Python, utilize o formato `:.1f` dentro da fun\u00e7\u00e3o `print`. O n\u00famero **1** ap\u00f3s o ponto indica o n\u00famero de casas decimais que ser\u00e3o exibidas:\n\n```py\nprint(f\"{resultado:.1f}\")\n```\n\n```py\nprint(\"{:.1f}\".format(resultado))\n```\n\n- Em Python, o c\u00e1lculo da raiz quadrada \u00e9 bastante simples e direto. Basta importar o m\u00f3dulo math e utilizar a fun\u00e7\u00e3o `sqrt()`\n\n```py\nimport math\nraiz = math.sqtr(numero)\n```\n\n- Em Python, temos duas formas principais de elevar um n\u00famero ao quadrado:\n\n```py\nimport math\nquadrado = math.pow(numero, 2)\n```\n\n```py\nquadrado =  numero ** 2\n```\n\n### Programando em: TypeScript\n\n- Para exibir um n\u00famero com uma casa decimal em TypeScript, utilize o m\u00e9todo `toFixed(1)` do objeto `Number`. O n\u00famero **1** especifica a quantidade de casas decimais que ser\u00e3o exibidas ap\u00f3s o ponto decimal:\n\n```ts\nconsole.log(resultado.toFixed(1)); \n```\n\n```ts\nwrite(resultado.toFixed(1));\n```\n\n- Em TypeScript, a abordagem \u00e9 semelhante \u00e0 do JavaScript. N\u00e3o h\u00e1 uma biblioteca padr\u00e3o para fun\u00e7\u00f5es matem\u00e1ticas, mas podemos utilizar a biblioteca Math global.\n\n```ts\nlet raiz: number = Math.sqrt(numero);\n```\n\n- Em TypeScript, temos duas formas principais de elevar um n\u00famero ao quadrado:\n\n```ts\nlet quadrado: number = numero ** 2;\n```\n\n```ts\nlet quadrado: number = Math.pow(numero, 2);\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT duas ra\u00edzes\n5.4\n25.0\n-12.0\n======== EXPECT\n0.44\n-5.07\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT duas ra\u00edzes\n3.0\n-7.0\n4.0\n======== EXPECT\n1.33\n1.00\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT uma raiz\n9.0\n-12.0\n4.0\n======== EXPECT\n0.67\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sem ra\u00edzes\n5.0\n3.0\n5.0\n======== EXPECT\nnao ha raiz real\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n1.0\n-1.0\n-20.0\n======== EXPECT\n5.00\n-4.00\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n2.00\n0.00\n0.00\n======== EXPECT\n0.00\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07\n5.3\n3.4\n19.2\n======== EXPECT\nnao ha raiz real\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
