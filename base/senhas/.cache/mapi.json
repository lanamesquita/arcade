{
    "title": "@senhas: Algoritmo de for\u00e7a bruta",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@senhas: Algoritmo de for\u00e7a bruta</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Algoritmo de for\u00e7a bruta</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/senhas/cover.jpg\" /></p>\n<h2>Motiva\u00e7\u00e3o</h2>\n<p>Todo algoritmo de for\u00e7a bruta exige a gera\u00e7\u00e3o de todas as combina\u00e7\u00f5es poss\u00edveis para a senha. Quanto mais informa\u00e7\u00e3o se tem sobre a senha, menor o espa\u00e7o de busca a ser testado.</p>\n<p>Seu amigo disse: Minha senha tem 2 d\u00edgitos e os \u00fanicos algarismos que podem aparecer nela s\u00e3o \"0,1,3\". Calculando todas as permuta\u00e7\u00f5es com repeti\u00e7\u00e3o geraria as seguintes possibilidades:</p>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">33</span> \n</code></pre></div>\n<h2>Dica</h2>\n<p>\u00c9 comum esses algoritmos de for\u00e7a bruta executarem por muitas horas e muitos dias. Ent\u00e3o \u00e9 importante guardar a \u00faltima senha testada para no caso de ter que retornar os testes, retornar a partir do ponto que parou.</p>\n<h3>Entrada</h3>\n<ul>\n<li>1a linha: S Q, respectivamente o tamanho da senha e a quantidade de novas senhas a serem geradas. S entre 1 e 50, Q entre 1 e 100.</li>\n<li>2a linha: algarismos que podem aparecer na senha.</li>\n<li>3a linha: senha de partida.</li>\n</ul>\n<h2>Sa\u00edda</h2>\n<ul>\n<li>As Q novas senhas a serem testadas uma por linha.</li>\n</ul>\n<h2>Exemplos</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span> <span class=\"n\">numerico</span> <span class=\"n\">apenas</span>\n<span class=\"mi\">4</span> <span class=\"mi\">10</span>\n<span class=\"mi\">0179</span>\n<span class=\"mi\">9997</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"mi\">9999</span>\n<span class=\"mi\">0000</span>\n<span class=\"mi\">0001</span>\n<span class=\"mi\">0007</span>\n<span class=\"mi\">0009</span>\n<span class=\"mi\">0010</span>\n<span class=\"mi\">0011</span>\n<span class=\"mi\">0017</span>\n<span class=\"mi\">0019</span>\n<span class=\"mi\">0070</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span> <span class=\"n\">misturado</span>\n<span class=\"mi\">3</span> <span class=\"mi\">7</span>\n<span class=\"c1\">#!1Ap</span>\n<span class=\"err\">!</span><span class=\"c1\">#A</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"err\">!</span><span class=\"c1\">#p</span>\n<span class=\"err\">!!</span><span class=\"c1\">#</span>\n<span class=\"err\">!!!</span>\n<span class=\"err\">!!</span><span class=\"mi\">1</span>\n<span class=\"err\">!!</span><span class=\"n\">A</span>\n<span class=\"err\">!!</span><span class=\"n\">p</span>\n<span class=\"err\">!</span><span class=\"mi\">1</span><span class=\"c1\">#</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span> <span class=\"n\">numerico</span> <span class=\"n\">invertido</span>\n<span class=\"mi\">4</span> <span class=\"mi\">10</span>\n<span class=\"mi\">0982</span>\n<span class=\"mi\">2222</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"mi\">0000</span>\n<span class=\"mi\">0009</span>\n<span class=\"mi\">0008</span>\n<span class=\"mi\">0002</span>\n<span class=\"mi\">0090</span>\n<span class=\"mi\">0099</span>\n<span class=\"mi\">0098</span>\n<span class=\"mi\">0092</span>\n<span class=\"mi\">0080</span>\n<span class=\"mi\">0089</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT numerico apenas\n4 10\n0179\n9997\n======== EXPECT\n9999\n0000\n0001\n0007\n0009\n0010\n0011\n0017\n0019\n0070\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT misturado\n3 7\n#!1Ap\n!#A\n======== EXPECT\n!#p\n!!#\n!!!\n!!1\n!!A\n!!p\n!1#\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT numerico invertido\n4 10\n0982\n2222\n======== EXPECT\n0000\n0009\n0008\n0002\n0090\n0099\n0098\n0092\n0080\n0089\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04 muitos\n6 50\nZou29@#\n####ou\n======== EXPECT\n####o2\n####o9\n####o@\n####o#\n####uZ\n####uo\n####uu\n####u2\n####u9\n####u@\n####u#\n####2Z\n####2o\n####2u\n####22\n####29\n####2@\n####2#\n####9Z\n####9o\n####9u\n####92\n####99\n####9@\n####9#\n####@Z\n####@o\n####@u\n####@2\n####@9\n####@@\n####@#\n#####Z\n#####o\n#####u\n#####2\n#####9\n#####@\n######\nZZZZZZ\nZZZZZo\nZZZZZu\nZZZZZ2\nZZZZZ9\nZZZZZ@\nZZZZZ#\nZZZZoZ\nZZZZoo\nZZZZou\nZZZZo2\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
