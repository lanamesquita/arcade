{
    "title": "@vet_i: Carregando vetor em v\u00e1rias linhas",
    "description": "# Carregando vetor em v\u00e1rias linhas\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/vet_i/cover.jpg)\n\n## Contexto\n\nOrganizar dados em um vetor \u00e9 uma tarefa comum em v\u00e1rias situa\u00e7\u00f5es. Suponha que voc\u00ea esteja coletando informa\u00e7\u00f5es sequenciais como medi\u00e7\u00f5es, valores ou itens que precisam ser armazenados e acessados posteriormente. Para isso, \u00e9 necess\u00e1rio ler os dados de forma organizada e mant\u00ea-los em uma estrutura de vetor, que pode ser manipulada ou exibida conforme necess\u00e1rio.\n\n### Entrada\n\n- A primeira linha cont\u00e9m um n\u00famero inteiro **N** representando a quantidade de elementos.\n- As pr\u00f3ximas **N** linhas cont\u00eam os elementos que devem ser inseridos no vetor, um por linha.\n\n### Sa\u00edda\n\n- Imprima os elementos do vetor, um por linha, na ordem de leitura.\n\n### Restri\u00e7\u00f5es\n\n- **0 \u2264 N \u2264 1000** (O vetor pode ter de 0 a 1000 elementos)\n- Cada elemento ser\u00e1 um n\u00famero inteiro.\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n3\n1\n2\n3\n======== EXPECT\n1\n2\n3\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n0\n======== EXPECT \n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n1\n6\n======== EXPECT\n6\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n5\n1\n2\n3\n4\n5\n======== EXPECT\n1\n2\n3\n4\n5\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n3\n1\n2\n3\n======== EXPECT\n1\n2\n3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0\n======== EXPECT\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1\n6\n======== EXPECT\n6\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n1\n2\n3\n4\n5\n======== EXPECT\n1\n2\n3\n4\n5\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
