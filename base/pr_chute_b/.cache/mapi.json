{
    "title": "@pr_chute_b: O computador tenta adivinhar seu n\u00famero",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@pr_chute_b: O computador tenta adivinhar seu n\u00famero</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>O computador tenta adivinhar seu n\u00famero</h1>\n<h2>Objetivo</h2>\n<p>Criar um jogo onde <strong>o jogador pensa em um n\u00famero secreto</strong> e o <strong>computador tenta adivinhar</strong> esse n\u00famero. A cada palpite, o jogador informa se o n\u00famero secreto \u00e9 maior, menor ou igual ao chute feito pelo computador. Se o intervalo ficar imposs\u00edvel, o computador perde!</p>\n<hr />\n<h2>Regras do jogo</h2>\n<ol>\n<li>O jogador pensa em um n\u00famero entre dois valores (ex: entre 1 e 99), <strong>sem contar ao computador</strong>.</li>\n<li>O computador chuta um n\u00famero dentro do intervalo aberto <code>]inferior, superior[</code>.</li>\n<li>A cada palpite:<ul>\n<li>O computador pergunta: \"\u00c9 maior (&gt;), menor (&lt;) ou igual (=)?\"</li>\n<li>O jogador responde:<ul>\n<li><code>=</code> \u2192 o computador acertou e vence.</li>\n<li><code>&gt;</code> \u2192 o n\u00famero secreto \u00e9 maior \u2192 atualiza o limite inferior.</li>\n<li><code>&lt;</code> \u2192 o n\u00famero secreto \u00e9 menor \u2192 atualiza o limite superior.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Se o intervalo ficar t\u00e3o pequeno que n\u00e3o h\u00e1 mais nenhum n\u00famero poss\u00edvel para chutar, o computador declara derrota.</li>\n</ol>\n<hr />\n<h2>Exemplo de execu\u00e7\u00e3o</h2>\n<div class=\"language-text highlight\"><pre><span></span><code>]0, 100[ \u00c9 53?\nAcertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? &lt;\n]0, 53[ \u00c9 25?\nAcertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? &gt;\n]25, 53[ \u00c9 42?\nAcertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? &gt;\n]42, 53[ \u00c9 46?\nAcertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? &lt;\n]42, 46[ \u00c9 44?\nAcertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? =\nganhei\n</code></pre></div>\n<h2>Como gerar n\u00fameros aleat\u00f3rios dentro de um intervalo aberto <code>]inf, sup[</code></h2>\n<h3>Python</h3>\n<div class=\"language-python highlight\"><pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">rand_interval</span><span class=\"p\">(</span><span class=\"n\">inf</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">sup</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"n\">inf</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">sup</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<h3>C</h3>\n<div class=\"language-c highlight\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">rand_interval</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">inf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">sup</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sup</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">inf</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">inf</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Go</h3>\n<div class=\"language-go highlight\"><pre><span></span><code><span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">RandInterval</span><span class=\"p\">(</span><span class=\"nx\">inf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">sup</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">rand</span><span class=\"p\">.</span><span class=\"nx\">Intn</span><span class=\"p\">(</span><span class=\"nx\">sup</span><span class=\"o\">-</span><span class=\"nx\">inf</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">inf</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {}
}
