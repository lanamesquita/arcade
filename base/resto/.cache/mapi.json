{
    "title": "@resto: Resultado e resto na divis\u00e3o",
    "description": "# Resultado e resto na divis\u00e3o\n\n![Imagem Teorema da Divis\u00e3o](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/resto/cover.png)\n\n## Contexto\n\nNa cadeira de Matem\u00e1tica D\u00edscreta, o professor ir\u00e1 apresentar o teorema da\ndivis\u00e3o. Ele diz o seguinte:\n\n**Teorema (Algoritmo da Divis\u00e3o):** Seja ***n*** um inteiro qualquer e ***d*** um inteiro\npositivo, existe um \u00fanico par de inteiros ***q*** e ***r*** com ***0 \u2264 r < d*** tais que:\n\n$$n = d*q + r$$\n\nEm outras palavras, dado dois inteiros positivos, por exemplo, 115 e 15,\npodemos escrever 115 = 15*7 + 10, onde 7 e 10 s\u00e3o o quociente e o resto da\ndivis\u00e3o de 115 por 15.\n\nImplemente um programa que receba dois inteiros positivos e calcule o valor do\nquociente e resto da divis\u00e3o do primeiro pelo segundo n\u00famero.\n\n### Entrada\n\n- Dois inteiros, um por linha\n\n### Sa\u00edda\n\n- Quociente e resto separados por espa\u00e7o\n\n## Testes\n\n```py\n>>>>>>>> INSERT 0\n51\n31\n======== EXPECT\n1 20\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 1\n398\n50\n======== EXPECT\n7 48\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 2\n350\n40\n======== EXPECT\n8 30\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 3\n587\n460\n======== EXPECT\n1 127\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 4\n215\n158\n======== EXPECT\n1 57\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 5\n760\n360\n======== EXPECT\n2 40\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 6\n498\n203\n======== EXPECT\n2 92\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 7\n61\n25\n======== EXPECT\n2 11\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 8\n32\n7\n======== EXPECT\n4 4\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 9\n873\n254\n======== EXPECT\n3 111\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 10\n689\n326\n======== EXPECT\n2 37\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 11\n939\n155\n======== EXPECT\n6 9\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 12\n302\n78\n======== EXPECT\n3 68\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 13\n584\n318\n======== EXPECT\n1 266\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 14\n899\n317\n======== EXPECT\n2 265\n<<<<<<<< FINISH\n```\n\n## Dicas\n\n### Programando em: C\n\n- Quando queremos saber o valor restante ap\u00f3s uma divis\u00e3o inteira, empregamos o operador m\u00f3dulo (`%`):\n\n```c\nint main() {\n    int resto = dividendo % divisor;\n}\n```\n\n### Programando em: Python\n\n- Quando queremos saber o valor restante ap\u00f3s uma divis\u00e3o inteira, empregamos o operador m\u00f3dulo (`%`):\n\n```py\nresto = dividendo % divisor\n```\n\n### Programando em: TypeScript\n\n- Quando queremos saber o valor restante ap\u00f3s uma divis\u00e3o inteira, empregamos o operador m\u00f3dulo (`%`).:\n\n```ts\nlet resto = dividendo % divisor;\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 0\n51\n31\n======== EXPECT\n1 20\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 1\n398\n50\n======== EXPECT\n7 48\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 2\n350\n40\n======== EXPECT\n8 30\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 3\n587\n460\n======== EXPECT\n1 127\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 4\n215\n158\n======== EXPECT\n1 57\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 5\n760\n360\n======== EXPECT\n2 40\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 6\n498\n203\n======== EXPECT\n2 92\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 7\n61\n25\n======== EXPECT\n2 11\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 8\n32\n7\n======== EXPECT\n4 4\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 9\n873\n254\n======== EXPECT\n3 111\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 10\n689\n326\n======== EXPECT\n2 37\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 11\n939\n155\n======== EXPECT\n6 9\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 12\n302\n78\n======== EXPECT\n3 68\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 13\n584\n318\n======== EXPECT\n1 266\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 14\n899\n317\n======== EXPECT\n2 265\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
