{
    "title": "@pr_chute_b: O computador tenta adivinhar seu n\u00famero",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@pr_chute_b: O computador tenta adivinhar seu n\u00famero</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"o-computador-tenta-adivinhar-seu-n\u00famero\">O computador tenta\nadivinhar seu n\u00famero</h1>\n<h2 id=\"objetivo\">Objetivo</h2>\n<p>Criar um jogo onde <strong>o jogador pensa em um n\u00famero\nsecreto</strong> e o <strong>computador tenta adivinhar</strong> esse\nn\u00famero. A cada palpite, o jogador informa se o n\u00famero secreto \u00e9 maior,\nmenor ou igual ao chute feito pelo computador. Se o intervalo ficar\nimposs\u00edvel, o computador perde!</p>\n<hr />\n<h2 id=\"regras-do-jogo\">Regras do jogo</h2>\n<ol type=\"1\">\n<li>O jogador pensa em um n\u00famero entre dois valores (ex: entre 1 e 99),\n<strong>sem contar ao computador</strong>.</li>\n<li>O computador chuta um n\u00famero dentro do intervalo aberto\n<code>]inferior, superior[</code>.</li>\n<li>A cada palpite:\n<ul>\n<li>O computador pergunta: \u201c\u00c9 maior (&gt;), menor (&lt;) ou igual\n(=)?\u201d</li>\n<li>O jogador responde:\n<ul>\n<li><code>=</code> \u2192 o computador acertou e vence.</li>\n<li><code>&gt;</code> \u2192 o n\u00famero secreto \u00e9 maior \u2192 atualiza o limite\ninferior.</li>\n<li><code>&lt;</code> \u2192 o n\u00famero secreto \u00e9 menor \u2192 atualiza o limite\nsuperior.</li>\n</ul></li>\n</ul></li>\n<li>Se o intervalo ficar t\u00e3o pequeno que n\u00e3o h\u00e1 mais nenhum n\u00famero\nposs\u00edvel para chutar, o computador declara derrota.</li>\n</ol>\n<hr />\n<h2 id=\"exemplo-de-execu\u00e7\u00e3o\">Exemplo de execu\u00e7\u00e3o</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>]0, 100[ \u00c9 53?</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>Acertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? &lt;</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>]0, 53[ \u00c9 25?</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>Acertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? &gt;</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>]25, 53[ \u00c9 42?</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>Acertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? &gt;</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>]42, 53[ \u00c9 46?</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>Acertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? &lt;</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>]42, 46[ \u00c9 44?</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>Acertei(=), \u00c9 maior(&gt;), \u00c9 menor(&lt;)? =</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>ganhei</span></code></pre></div>\n<h2\nid=\"como-gerar-n\u00fameros-aleat\u00f3rios-dentro-de-um-intervalo-aberto-inf-sup\">Como\ngerar n\u00fameros aleat\u00f3rios dentro de um intervalo aberto\n<code>]inf, sup[</code></h2>\n<h3 id=\"python\">Python</h3>\n<div class=\"sourceCode\" id=\"cb2\"><pre\nclass=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> rand_interval(inf: <span class=\"bu\">int</span>, sup: <span class=\"bu\">int</span>) <span class=\"op\">-&gt;</span> <span class=\"bu\">int</span>:</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> random.randint(inf <span class=\"op\">+</span> <span class=\"dv\">1</span>, sup <span class=\"op\">-</span> <span class=\"dv\">1</span>)</span></code></pre></div>\n<h3 id=\"c\">C</h3>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">int</span> rand_interval<span class=\"op\">(</span><span class=\"dt\">int</span> inf<span class=\"op\">,</span> <span class=\"dt\">int</span> sup<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> <span class=\"op\">(</span>rand<span class=\"op\">()</span> <span class=\"op\">%</span> <span class=\"op\">(</span>sup <span class=\"op\">-</span> inf <span class=\"op\">-</span> <span class=\"dv\">1</span><span class=\"op\">))</span> <span class=\"op\">+</span> inf <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<h3 id=\"go\">Go</h3>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode go\"><code class=\"sourceCode go\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">func</span> RandInterval<span class=\"op\">(</span>inf<span class=\"op\">,</span> sup <span class=\"dt\">int</span><span class=\"op\">)</span> <span class=\"dt\">int</span> <span class=\"op\">{</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> rand<span class=\"op\">.</span>Intn<span class=\"op\">(</span>sup<span class=\"op\">-</span>inf<span class=\"op\">-</span><span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"op\">+</span> inf <span class=\"op\">+</span> <span class=\"dv\">1</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
