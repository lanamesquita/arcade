{
    "title": "@c021arraysmultidimensionais: @c021arraysmultidimensionais",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@c021arraysmultidimensionais:\n@c021arraysmultidimensionais</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"c021arraysmultidimensionais\"><span class=\"citation\"\ndata-cites=\"c021arraysmultidimensionais\">@c021arraysmultidimensionais</span></h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<p><a\nhref=\"https://github.com/qxcodefup/arcade/blob/master/base/c021arraysmultidimensionais/.cache/draft.c\">C\u00f3digo</a></p>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span> <span class=\"dv\">2</span> <span class=\"dv\">3</span> </span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">4</span> <span class=\"dv\">5</span> <span class=\"dv\">6</span> </span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">7</span> <span class=\"dv\">8</span> <span class=\"dv\">9</span> </span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\n1 2 3 \n4 5 6 \n7 8 9 \n\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [
        {
            "name": "draft.c",
            "contents": "#include <stdio.h>\n\n// Em C, podemos usar arrays multidimensionais (ou matrizes) para armazenar dados em formato de tabela.\n// Vamos declarar e inicializar uma matriz 3x3 (3 linhas e 3 colunas) e exibir os seus elementos.\n// OBS 1: Perceba que pra matrizes, sempre vamos usar dois iteradores 'for', um para as linhas, e outro para colunas.\n// OBS 2: vamos esquematizar da mesma forma da quest\u00e3o anterior uma matriz (que \u00e9 um detor de vetores no final das contas):\n//Assim como arrays comuns, os \u00edndices em uma matriz come\u00e7am em `0`.\n\n//Imagine uma matriz de inteiros com 3 linhas e 3 colunas:\n\n// Matriz 3x3 de inteiros:\n//                     [ 1,  2,  3 ]\n//                     [ 4,  5,  6 ]\n//                     [ 7,  8,  9 ]\n// Em rela\u00e7\u00e3o aos \u00edndices (linhas e colunas):\n//                    {matriz[0][0], matriz[0][1], matriz[0][2]}\n//                    {matriz[1][0], matriz[1][1], matriz[1][2]}\n//                    {matriz[2][0], matriz[2][1], matriz[2][2]}\n// Para o caso do numero 7, se l\u00ea matriz linha 2, coluna 0.\n\n\n\n// TODO: Declare uma matriz chamada `matriz` que:\n// - Tenha 3 linhas e 3 colunas.\n// - Seja inicializada com os seguintes valores:\n//   1 2 3\n//   4 5 6\n//   7 8 9\n\n// TODO: Crie uma fun\u00e7\u00e3o `imprimirMatriz` que:\n// - Receba como par\u00e2metros uma matriz 3x3 de inteiros.\n// - N\u00e3o retorne nada (`void`).\n// - Dentro da fun\u00e7\u00e3o, use loops `for` aninhados para exibir cada elemento da matriz em formato de tabela.\n\n// TODO: No `main`, chame a fun\u00e7\u00e3o `imprimirMatriz` para exibir os valores da matriz `matriz`.\n\nvoid imprimirMatriz(int m[3][3]) {\n    //DEL!\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%d \", m[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    //ACT!\n    // for (int i = 0; i < 3; i++) {\n    //     for (int j = 0; j < 3; j++) {\n    //         printf(\"%d \", m[???][???]);\n    //     }\n    //     printf(\"\\n\");\n    // }\n    //ADD!\n}\n\nint main() {\n    //Tamb\u00e9m podemos inicializar a matriz com valores pr\u00e9-definidos, basta atribuirmos os valores entre chaves \"{}\" para cada linha da matriz.\n    // Inicialize a matriz `matriz` com os valores fornecidos.\n    //DEL!\n    int matriz[3][3] = {\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9}\n    };\n    //ACT!\n    // int matriz[???][???] = {\n    //     {???, ???, ???},\n    //     {???, ???, ???},\n    //     {???, ???, ???}\n    // };\n    //ADD!\n    \n    // Chame a fun\u00e7\u00e3o `imprimirMatriz` para exibir os valores da matriz.\n    //DEL!\n    imprimirMatriz(matriz);\n    //ACT!\n    // imprimirMatriz();\n    //ADD!\n    \n    return 0;\n}\n",
            "encoding": 0
        }
    ],
    "draft": {}
}
