{
    "title": "@facil: Trila Modo f\u00e1cil - OBI 2005",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@facil: Trila Modo f\u00e1cil - OBI 2005</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"trila-modo-f\u00e1cil---obi-2005\">Trila Modo f\u00e1cil - OBI 2005</h1>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/facil/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>Uma trilha \u00e9 descrita como um conjunto de alturas representando os\ntrechos de subidas e descidas. Considere que apenas existe esfor\u00e7o para\nos trechos onde existem subidas e que descer n\u00e3o realiza esfor\u00e7o. Uma\ntrilha pode ser percorrida em qualquer sentido.</p>\n<p>Por exemplo, seja a trilha de 6 pontos a seguir.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">300</span> <span class=\"dv\">305</span> <span class=\"dv\">301</span> <span class=\"dv\">299</span> <span class=\"dv\">290</span> <span class=\"dv\">295</span></span></code></pre></div>\n<p>Se ela for percorrida no sentido esquerda direita vai gastar 10 de\nesfor\u00e7o:</p>\n<ul>\n<li>5 no trecho 1 : (305 - 5)</li>\n<li>0 no trecho 2</li>\n<li>0 no trecho 3</li>\n<li>0 no trecho 4</li>\n<li>5 no trecho 5 : (295 - 5)</li>\n</ul>\n<p>Se ela for percorrida no sentido contr\u00e1rio vai gastar 14 de esfor\u00e7o.\nEnt\u00e3o o melhor esfor\u00e7o da trilha \u00e9 10.</p>\n<h2 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h2>\n<p>Dado uma trilha, voc\u00ea deve calcular o menor esfor\u00e7o para\npercorr\u00ea-la.</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A descric\u0327a\u0303o de uma trilha inicia com um nu\u0301mero inteiro M que indica\na quantidade de pontos de medic\u0327a\u0303o da trilha (2 \u2264 M \u2264 1000), seguido de M\nnu\u0301meros inteiros Hi, um por linha, representando a altura dos pontos da\ntrilha (medidos a intervalos regulares e iguais para todas as\nlinhas).</li>\n<li>Pode-se percorrer a trilha em qualquer sentido (ou seja, partindo do\nponto de altitude H1 em direc\u0327a\u0303o ao ponto de altitude HM , ou partindo do\nponto de altitude HM em direc\u0327a\u0303o ao ponto de altitude H1 ).</li>\n</ul>\n<h2 id=\"sa\u00edda\">Sa\u00edda</h2>\n<ul>\n<li>Seu programa deve produzir uma u\u0301nica linha na sa\u0131\u0301da, contendo um\nnu\u0301mero inteiro representando o esfor\u00e7o pra percorrer a trilha.</li>\n</ul>\n<h2 id=\"restri\u00e7\u00f5es\">Restri\u00e7\u00f5es</h2>\n<ul>\n<li>2 \u2264 M \u2264 1000<br />\n</li>\n<li>0 \u2264 Hi \u2264 1000</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT <span class=\"dv\">00</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">6</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">300</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">305</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">301</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">299</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">290</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">295</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">10</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 00\n6\n300\n305\n301\n299\n290\n295\n======== EXPECT\n10\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 00\n2\n236\n605\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 01\n3\n529\n697\n624\n======== EXPECT\n73\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n3\n163\n428\n786\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n4\n854\n577\n447\n864\n======== EXPECT\n407\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n5\n495\n899\n311\n985\n262\n======== EXPECT\n1078\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n5\n108\n481\n695\n762\n300\n======== EXPECT\n462\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n7\n196\n909\n431\n320\n632\n938\n228\n======== EXPECT\n1299\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07\n8\n884\n132\n229\n876\n758\n145\n452\n134\n======== EXPECT\n1051\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 08\n9\n303\n556\n877\n814\n492\n550\n431\n719\n559\n======== EXPECT\n664\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 09\n10\n552\n755\n493\n273\n152\n448\n409\n769\n225\n203\n======== EXPECT\n859\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
