{
    "title": "@c010logicos: @c010logicos",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@c010logicos: @c010logicos</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"c010logicos\"><span class=\"citation\"\ndata-cites=\"c010logicos\">@c010logicos</span></h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">0</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">0</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\n1\n1\n0\n1\n1\n0\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n\nint main() {\n    // E os operadores l\u00f3gicos do C?\n    // Operadores l\u00f3gicos tamb\u00e9m s\u00e3o utilizados (tamb\u00e9m) para fazer compara\u00e7\u00f5es e tomar decis\u00f5es dentro de programas.\n    // Operadores l\u00f3gicos tamb\u00e9m combinam express\u00f5es e retornam verdadeiro (1) ou falso (0), mas a l\u00f3gica b\u00e1sica muda:\n    // && : \"E\" l\u00f3gico (retorna verdadeiro se ambas as express\u00f5es forem verdadeiras)\n    // || : \"OU\" l\u00f3gico (retorna verdadeiro se pelo menos uma express\u00e3o for verdadeira)\n    // !  : \"N\u00c3O\" l\u00f3gico (inverte o valor l\u00f3gico da express\u00e3o)\n\n    // Vamos praticar!\n\n    // \"E\" L\u00d3GICO:\n    // TODO: Verifique se 5 \u00e9 maior que 3 E 9 \u00e9 menor que 12 e printe o resultado\n    //DEL!\n    printf(\"%d\\n\", (5 > 3) && (9 < 12));\n    //ACT!\n    // printf(\"%d\\n\", (5 ??? 3) && (9 ??? 12)); \n    //ADD!\n\n    // \"OU\" L\u00d3GICO:\n    // TODO: Verifique se 4 \u00e9 menor que 2 OU 7 \u00e9 maior que 5 e printe o resultado\n    //DEL!\n    printf(\"%d\\n\", (4 < 2) || (7 > 5));\n    //ACT!\n    // printf(\"%d\\n\", (4 ??? 2) || (7 ??? 5)); \n    //ADD!\n\n    // \"N\u00c3O\" L\u00d3GICO:\n    // TODO: Verifique o inverso da condi\u00e7\u00e3o 5 maior que 3 e printe o resultado\n    //DEL!\n    printf(\"%d\\n\", !(5 > 3));\n    //ACT!\n    // printf(\"%d\\n\", ??? (5 ??? 3)); \n    //ADD!\n\n\n    //EXTRA (ORDEM DE IMPORT\u00c2NCIA DOS OPERADORES): \n    //Um ponto muito importante \u00e9 que os operadores t\u00eam uma ordem de import\u00e2ncia se n\u00e3o colocarmos par\u00eanteses, o que pode atrapalhar sua l\u00f3gica na hora de codar\n    //\u00c0 t\u00edtulo de curiosidade, o \"!\" \u00e9 o mais importante, o \"&&\" \u00e9 o intermedi\u00e1rio e o \"||\" \u00e9 o menos importante.\n\n    //Agora que sabemos disso, vamos praticar um pouco:\n\n    // \"E\" L\u00d3GICO COM PARENTESES:\n    // TODO: Verifique se 8 \u00e9 menor que 10 E 6 \u00e9 maior que 4, e printe o resultado\n    //DEL!\n    printf(\"%d\\n\", (8 < 10) && (6 > 4));\n    //ACT!\n    // printf(\"%d\\n\", (8 ??? 10) && (6 ??? 4)); \n    //ADD!\n\n    // \"OU\" L\u00d3GICO COM PARENTESES:\n    // TODO: Verifique se 3 \u00e9 maior que 5 OU 12 \u00e9 menor que 15, e printe o resultado\n    //DEL!\n    printf(\"%d\\n\", (3 > 5) || (12 < 15));\n    //ACT!\n    // printf(\"%d\\n\", (3 ??? 5) || (12 ??? 15)); \n    //ADD!\n\n    // \"N\u00c3O\" L\u00d3GICO COM PARENTESES:\n    // TODO: Verifique o inverso da condi\u00e7\u00e3o 7 menor que 10 e printe o resultado\n    //DEL!\n    printf(\"%d\\n\", !(7 < 10));\n    //ACT!\n    // printf(\"%d\\n\", ??? (7 ??? 10)); \n    //ADD!\n\n    return 0;\n}\n",
                "encoding": 0
            }
        ]
    }
}
