{
    "title": "@retangulo: Pontos do ret\u00e2ngulo",
    "description": "# Pontos do ret\u00e2ngulo\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/retangulo/cover.jpg)\n\nUm ret\u00e2ngulo com os lados paralelos aos eixos pode ser descrito por dois pontos `supEsq` e `infDir`. O ponto supEsq representa a coordenada do canto superior esquerdo e o ponto infDir representa a coordenada do canto inferior direito.\n\n```C\ntypedef struct  {\n    int x, y;\n} Ponto;\n\ntypedef struct {\n   Ponto supEsq;\n   Ponto infDir; \n} Retangulo;\n```\n\nConstrua uma fun\u00e7\u00e3o com o seguinte prot\u00f3tipo:\n\n```C\nint dentro(Retangulo ret, Ponto p);\n```\n\nA fun\u00e7\u00e3o dentro devolve 1 se o ponto p est\u00e1 dentro do ret\u00e2ngulo rete 0, caso contr\u00e1rio.\n\nA fun\u00e7\u00e3o principal do seu programa \u00e9 a seguinte:\n\n```C\n#include <stdio.h>\n\ntypedef struct  {\n    int x, y;\n} Ponto;\n\ntypedef struct {\n  Ponto supEsq;\n  Ponto infDir;\n} Retangulo;\n\nPonto createPonto(int x1, int y1){\n    Ponto p = {x1, y1};\n    return p;\n}\n\nRetangulo createRetangulo(int x1, int y1, int x2, int y2) {\n    Retangulo r = {x1,y1,x2,y2};\n    return r;\n};\n\nint dentro(Retangulo r, Ponto p);\n\nint main(){\n    int x1, y1, x2, y2;\n    scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n    Retangulo r = createRetangulo(x1, y1, x2, y2);\n    int x, y;\n    scanf(\"%d %d\", &x, &y);\n    Ponto p = createPonto(x,y);\n    printf(\"%d\\n\", dentro(r,p) ); //1\n}\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n0 5 5 0\n2 2\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0 5 5 0\n2 7\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0 5 5 0\n-1 4\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0 5 5 0\n5 5\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0 5 5 0\n2 -1\n======== EXPECT\n0\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
