{
    "title": "@c030malloccallocfree: @c030malloccallocfree",
    "description": "# @c030malloccallocfree\n\nDescri\u00e7\u00e3o no c\u00f3digo.\n\n[C\u00f3digo](https://github.com/qxcodefup/arcade/blob/master/base/c030malloccallocfree/.cache/draft.c)\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n======== EXPECT\nValores armazenados: 10 20 30 40 50\n\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nValores armazenados: 10 20 30 40 50\n\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n#include <stdlib.h>\n\n// Em C, a aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria permite que o programa aloque mem\u00f3ria em tempo de execu\u00e7\u00e3o.\n// A fun\u00e7\u00e3o `malloc` (Memory Allocation) \u00e9 usada para alocar um bloco de mem\u00f3ria no heap:\n// - Ela recebe o tamanho em bytes que queremos alocar (use sizeof para evitar erros).\n// - Retorna um ponteiro para o in\u00edcio do bloco alocado ou NULL se falhar.\n\n// O `calloc` (Clear Allocation) funciona de forma semelhante ao `malloc`, mas:\n// - Ele inicializa toda a mem\u00f3ria alocada com zeros.\n// - Requer dois argumentos: o n\u00famero de elementos e o tamanho de cada elemento.\n\n// Ap\u00f3s usar a mem\u00f3ria alocada, \u00e9 necess\u00e1rio liber\u00e1-la usando a fun\u00e7\u00e3o `free` para evitar vazamentos de mem\u00f3ria.\n\n// TODO: Aloque dinamicamente um array de 5 inteiros usando `malloc`.\n// - Inicialize os valores manualmente: 10, 20, 30, 40, 50.\n// - Imprima os valores armazenados no array.\n\n// TODO: Libere a mem\u00f3ria alocada usando `free`.\n\nint main() {\n    // Passo 1: Alocar mem\u00f3ria usando malloc\n    //DEL!\n    int* numeros = (int*)malloc(5 * sizeof(int)); // Alocando mem\u00f3ria para 5 inteiros\n    if (numeros == NULL) { // Sempre verificar se a aloca\u00e7\u00e3o foi bem-sucedida\n        printf(\"Erro ao alocar mem\u00f3ria.\\n\");\n        return 1;\n    }\n\n    // Passo 2: Inicializar valores manualmente\n    for (int i = 0; i < 5; i++) {\n        numeros[i] = (i + 1) * 10; // Inicializando com m\u00faltiplos de 10\n    }\n\n    // Passo 3: Imprimir os valores armazenados\n    printf(\"Valores armazenados: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", numeros[i]);\n    }\n    printf(\"\\n\");\n\n    // Passo 4: Liberar a mem\u00f3ria alocada\n    free(numeros);\n    //ACT!\n    // int* numeros = (int*)???(5 * sizeof(int)); \n    // if (numeros == NULL) {\n    //     printf(\"Erro ao alocar mem\u00f3ria.\\n\");\n    //     return 1;\n    // }\n    // ???; // Inicializar valores\n    // ???; // Imprimir valores\n    // free(???); // Liberar mem\u00f3ria\n    //ADD!\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
