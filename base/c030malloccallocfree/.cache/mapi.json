{
    "title": "@c030malloccallocfree: @c030malloccallocfree",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@c030malloccallocfree: @c030malloccallocfree</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>@c030malloccallocfree</h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<p><a href=\"https://github.com/qxcodefup/arcade/blob/master/base/c030malloccallocfree/.cache/draft.c\">C\u00f3digo</a></p>\n<h2>Testes</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"n\">Valores</span> <span class=\"n\">armazenados</span><span class=\"p\">:</span> <span class=\"mi\">10</span> <span class=\"mi\">20</span> <span class=\"mi\">30</span> <span class=\"mi\">40</span> <span class=\"mi\">50</span>\n\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nValores armazenados: 10 20 30 40 50\n\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n#include <stdlib.h>\n\n// Em C, a aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria permite que o programa aloque mem\u00f3ria em tempo de execu\u00e7\u00e3o.\n// A fun\u00e7\u00e3o `malloc` (Memory Allocation) \u00e9 usada para alocar um bloco de mem\u00f3ria no heap:\n// - Ela recebe o tamanho em bytes que queremos alocar (use sizeof para evitar erros).\n// - Retorna um ponteiro para o in\u00edcio do bloco alocado ou NULL se falhar.\n\n// O `calloc` (Clear Allocation) funciona de forma semelhante ao `malloc`, mas:\n// - Ele inicializa toda a mem\u00f3ria alocada com zeros.\n// - Requer dois argumentos: o n\u00famero de elementos e o tamanho de cada elemento.\n\n// Ap\u00f3s usar a mem\u00f3ria alocada, \u00e9 necess\u00e1rio liber\u00e1-la usando a fun\u00e7\u00e3o `free` para evitar vazamentos de mem\u00f3ria.\n\n// TODO: Aloque dinamicamente um array de 5 inteiros usando `malloc`.\n// - Inicialize os valores manualmente: 10, 20, 30, 40, 50.\n// - Imprima os valores armazenados no array.\n\n// TODO: Libere a mem\u00f3ria alocada usando `free`.\n\nint main() {\n    // Passo 1: Alocar mem\u00f3ria usando malloc\n    //DEL!\n    int* numeros = (int*)malloc(5 * sizeof(int)); // Alocando mem\u00f3ria para 5 inteiros\n    if (numeros == NULL) { // Sempre verificar se a aloca\u00e7\u00e3o foi bem-sucedida\n        printf(\"Erro ao alocar mem\u00f3ria.\\n\");\n        return 1;\n    }\n\n    // Passo 2: Inicializar valores manualmente\n    for (int i = 0; i < 5; i++) {\n        numeros[i] = (i + 1) * 10; // Inicializando com m\u00faltiplos de 10\n    }\n\n    // Passo 3: Imprimir os valores armazenados\n    printf(\"Valores armazenados: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", numeros[i]);\n    }\n    printf(\"\\n\");\n\n    // Passo 4: Liberar a mem\u00f3ria alocada\n    free(numeros);\n    //ACT!\n    // int* numeros = (int*)???(5 * sizeof(int)); \n    // if (numeros == NULL) {\n    //     printf(\"Erro ao alocar mem\u00f3ria.\\n\");\n    //     return 1;\n    // }\n    // ???; // Inicializar valores\n    // ???; // Imprimir valores\n    // free(???); // Liberar mem\u00f3ria\n    //ADD!\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
