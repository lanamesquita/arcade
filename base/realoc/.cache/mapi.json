{
    "title": "@realoc: Vetor de strings com variados tamanhos",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@realoc: Vetor de strings com variados tamanhos</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"vetor-de-strings-com-variados-tamanhos\">Vetor de strings com\nvariados tamanhos</h1>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/realoc/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<h2 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h2>\n<p>Leia um conjunto de strings e aloque apenas a quantidade de mem\u00f3ria\nnecess\u00e1ria para armazenar estas strings. Em seguida ordene e imprima as\nstrings. Somente ser\u00e3o aceitas respostas com aloca\u00e7\u00e3o din\u00e2mica das\nstrings (verifica\u00e7\u00e3o manual).</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>Linha 1: n\u00famero de strings.</li>\n<li>Uma linha para cada strings. A linha come\u00e7a com um inteiro indicando\nquantos caracteres tem a string, seguido de um espa\u00e7o e a string.</li>\n</ul>\n<h2 id=\"sa\u00edda\">Sa\u00edda</h2>\n<ul>\n<li>Strings em ordem crescente (ou seja, na ordem do dicion\u00e1rio).</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">6</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">12</span> Gilberto Gil</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">14</span> Maria Bet\u00e2nia</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">18</span> Osvaldo Montenegro</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">14</span> Caetano Veloso</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">6</span> Djavan</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">12</span> Marisa Monte</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>Caetano Veloso</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>Djavan</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>Gilberto Gil</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>Maria Bet\u00e2nia</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>Marisa Monte</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>Osvaldo Montenegro</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n<h2 id=\"dicas\">Dicas</h2>\n<ul>\n<li>Declare um vetor com n ponteiros para char: char* v[n];</li>\n<li>Caso queira alocar este vetor dinamicamente, use um vetor contendo\nponteiros para caracteres:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">char</span> <span class=\"op\">**</span>v <span class=\"op\">=</span> <span class=\"op\">(</span><span class=\"dt\">char</span><span class=\"op\">**)</span> malloc<span class=\"op\">(</span> n <span class=\"op\">*</span> <span class=\"kw\">sizeof</span><span class=\"op\">(</span><span class=\"dt\">char</span><span class=\"op\">*)</span> <span class=\"op\">);</span></span></code></pre></div>\n<ul>\n<li><p>Para cada string, - leia o tamanho da string; - aloque mem\u00f3ria\npara armazenar esta string (lembre de alocar um caractere a mais para o\nterminador); - armazene o endere\u00e7o da mem\u00f3ria alocada em v[i] (elemento\ndo vetor); - leia a string e grave em v[i].</p></li>\n<li><p>Para ordenar, - use a fun\u00e7\u00e3o strcmp para verificar se duas\nstrings consecutivas est\u00e3o fora de ordem; - ao trocar duas strings,\ntroque apenas o endere\u00e7o de mem\u00f3ria (n\u00e3o o conte\u00fado); - note que n\u00e3o \u00e9\nv\u00e1lido trocar o conte\u00fado, pois as strings n\u00e3o t\u00eam o mesmo\ntamanho.</p></li>\n</ul>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">char</span><span class=\"op\">*</span> v<span class=\"op\">[</span>n<span class=\"op\">];</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+--+</span>        <span class=\"op\">+-+-+-+-+-+</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">|</span> <span class=\"op\">+--------&gt;|</span>J<span class=\"op\">|</span>O<span class=\"op\">|</span>A<span class=\"op\">|</span>O<span class=\"op\">|</span><span class=\"dv\">0</span><span class=\"op\">|</span>    v<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"op\">(</span><span class=\"dt\">char</span><span class=\"op\">*)</span> malloc<span class=\"op\">(</span><span class=\"dv\">5</span><span class=\"op\">*</span><span class=\"kw\">sizeof</span><span class=\"op\">(</span><span class=\"dt\">char</span><span class=\"op\">));</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+--+</span>        <span class=\"op\">+-+-+-+-+-+</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">|</span> <span class=\"op\">+--------&gt;</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+--+</span>        <span class=\"op\">+-+-+-+-+-+-+</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">|</span> <span class=\"op\">+--------&gt;|</span>M<span class=\"op\">|</span>A<span class=\"op\">|</span>R<span class=\"op\">|</span>I<span class=\"op\">|</span>A<span class=\"op\">|</span><span class=\"dv\">0</span><span class=\"op\">|</span>  v<span class=\"op\">[</span><span class=\"dv\">2</span><span class=\"op\">]</span> <span class=\"op\">=</span> <span class=\"op\">(</span><span class=\"dt\">char</span><span class=\"op\">*)</span>malloc<span class=\"op\">(</span><span class=\"dv\">6</span><span class=\"op\">*</span><span class=\"kw\">sizeof</span><span class=\"op\">(</span><span class=\"dt\">char</span><span class=\"op\">));</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+--+</span>        <span class=\"op\">+-+-+-+-+-+-+</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"op\">.</span></span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"op\">.</span></span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"op\">.</span></span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+--+</span></span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">|</span>  <span class=\"op\">|</span></span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"op\">+--+</span></span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n6\n12 Gilberto Gil\n14 Maria Bet\u00e2nia\n18 Osvaldo Montenegro\n14 Caetano Veloso\n6 Djavan\n12 Marisa Monte\n======== EXPECT\nCaetano Veloso\nDjavan\nGilberto Gil\nMaria Bet\u00e2nia\nMarisa Monte\nOsvaldo Montenegro\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
