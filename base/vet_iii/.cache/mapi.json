{
    "title": "@vet_iii: impress\u00e3o formatada",
    "description": "# impress\u00e3o formatada\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/vet_iii/cover.jpg)\n\n## Contexto\n\nAo trabalhar com vetores, muitas vezes \u00e9 necess\u00e1rio formatar a sa\u00edda de forma mais leg\u00edvel. Neste exerc\u00edcio, o objetivo \u00e9 imprimir um vetor em um formato espec\u00edfico, utilizando uma fun\u00e7\u00e3o que realiza a formata\u00e7\u00e3o correta, separando os elementos por v\u00edrgulas e espa\u00e7os.\n\nVoc\u00ea deve implementar um programa que leia um vetor, armazene os valores e depois os exiba com uma formata\u00e7\u00e3o espec\u00edfica. O vetor deve ser impresso entre colchetes e os elementos separados por **\"`,` \"**. Se o vetor estiver vazio, deve ser exibido como `[]`.\n\n### Entrada\n\n- A primeira linha cont\u00e9m um n\u00famero inteiro **N** representando a quantidade de elementos do vetor.\n- A segunda linha cont\u00e9m **N** inteiros, separados por espa\u00e7os, que devem ser inseridos no vetor.\n\n### Sa\u00edda\n\n- Imprima o vetor carregado entre colchetes, com os elementos separados por espa\u00e7os.\n\n### Restri\u00e7\u00f5es\n\n- **0 \u2264 N \u2264 1000** (O vetor pode ter de 0 a 1000 elementos)\n- Cada elemento ser\u00e1 um n\u00famero inteiro.\n\n## Desafio\n\nImplemente uma fun\u00e7\u00e3o que receba o vetor e o imprima formatado conforme as especifica\u00e7\u00f5es:\n\n### Programando em C\n\n```c\nvoid imprime_vetor(int vet[], int n) {\n}\n```\n\n### Programando em Python\n\n```py\ndef imprime_vetor(vet: List[int]) -> None:\n```\n\n### Programando em TS\n\n```ts\nfunction imprimeVetor(vet: number[]): void {\n}\n```\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n3\n1 2 3\n======== EXPECT\n[1, 2, 3]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n0\n======== EXPECT\n[]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n1\n6\n======== EXPECT\n[6]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n5\n1 2 3 4 5\n======== EXPECT\n[1, 2, 3, 4, 5]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n4\n4 2 3 1\n======== EXPECT\n[4, 2, 3, 1]\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n3\n1 2 3\n======== EXPECT\n[1, 2, 3]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0\n======== EXPECT\n[]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1\n6\n======== EXPECT\n[6]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n5\n1 2 3 4 5\n======== EXPECT\n[1, 2, 3, 4, 5]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
