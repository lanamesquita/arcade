{
    "title": "@cofre: O segredo do cofre - OBI 2017",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@cofre: O segredo do cofre - OBI 2017</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"o-segredo-do-cofre---obi-2017\">O segredo do cofre - OBI\n2017</h1>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/cofre/cover.jpg\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>O sistema de segredo para abrir esse cofre \u00e9 bastante complexo. Ao\ninv\u00e9s de girar um bot\u00e3o v\u00e1rias vezes, como a gente v\u00ea normalmente nos\nfilmes, o dono do cofre tem que deslizar um controle para a esquerda e\npara a direita, em cima de uma barra, v\u00e1rias vezes, parando em\ndeterminadas posi\u00e7\u00f5es. A barra possui N posi\u00e7\u00f5es e cada posi\u00e7\u00e3o cont\u00e9m\num n\u00famero inteiro entre 0 e 9, inclusive. No exemplo da figura, a barra\ntem 14 posi\u00e7\u00f5es e o controle est\u00e1 na posi\u00e7\u00e3o 1.</p>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/cofre/cofre.png\"\nalt=\"_\" />\n<figcaption aria-hidden=\"true\">_</figcaption>\n</figure>\n<p>O segredo vai depender de quantas vezes cada um dos dez inteiros\nentre 0 e 9 vai aparecer dentro do controle. Por exemplo, suponha que o\ndono deslize o controle da posi\u00e7\u00e3o inicial 1 at\u00e9 a posi\u00e7\u00e3o 9, depois\npara a posi\u00e7\u00e3o 4, depois para a posi\u00e7\u00e3o 11 e por fim at\u00e9 a posi\u00e7\u00e3o 13.\nVeja que o inteiro 1, por exemplo, vai aparecer seis vezes dentro do\ncontrole; e o inteiro 9 vai aparecer quatro vezes.</p>\n<p>Dada a sequ\u00eancia de inteiros na barra e a sequ\u00eancia de posi\u00e7\u00f5es entre\nas quais o dono desliza o controle, come\u00e7ando da posi\u00e7\u00e3o inicial 1, seu\nprograma deve contar quantas vezes cada inteiro, entre 0 e 9, vai\naparecer dentro do controle.</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>A primeira linha da entrada cont\u00e9m dois inteiros N e M,\nrepresentando o n\u00famero de posi\u00e7\u00f5es na barra do cofre e o n\u00famero de\nposi\u00e7\u00f5es na sequ\u00eancia que o dono vai seguir para deslizar o controle. A\nsegunda linha cont\u00e9m N inteiros entre 0 e 9, definindo a barra do cofre.\nA terceira linha cont\u00e9m M inteiros representando a sequ\u00eancia de posi\u00e7\u00f5es\nque o dono vai seguir. A primeira posi\u00e7\u00e3o nessa sequ\u00eancia \u00e9 sempre 1 e\nn\u00e3o h\u00e1 duas posi\u00e7\u00f5es consecutivas iguais.</li>\n</ul>\n<h2 id=\"sa\u00edda\">Sa\u00edda</h2>\n<ul>\n<li>Seu programa deve imprimir uma linha contendo 10 inteiros,\nrepresentando o n\u00famero de vezes que cada inteiro, entre 0 e 9, vai\naparecer no controle da barra.</li>\n</ul>\n<h2 id=\"restri\u00e7\u00f5es\">Restri\u00e7\u00f5es</h2>\n<ul>\n<li>2 \u2264 N \u2264 105 e 2 \u2264 M \u2264 105</li>\n</ul>\n<h2 id=\"informa\u00e7\u00f5es-sobre-a-pontua\u00e7\u00e3o\">Informa\u00e7\u00f5es sobre a\npontua\u00e7\u00e3o</h2>\n<ul>\n<li>Em um conjunto de testes somando 40 pontos, N \u2264 1000 e M \u2264 1000</li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT <span class=\"dv\">0</span><span class=\"er\">1</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">14</span> <span class=\"dv\">5</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">9</span> <span class=\"dv\">4</span> <span class=\"dv\">3</span> <span class=\"dv\">9</span> <span class=\"dv\">1</span> <span class=\"dv\">2</span> <span class=\"dv\">4</span> <span class=\"dv\">5</span> <span class=\"dv\">1</span> <span class=\"dv\">1</span> <span class=\"dv\">9</span> <span class=\"dv\">7</span> <span class=\"dv\">0</span> <span class=\"dv\">5</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span> <span class=\"dv\">9</span> <span class=\"dv\">4</span> <span class=\"dv\">11</span> <span class=\"dv\">13</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>[ <span class=\"dv\">1</span> <span class=\"dv\">6</span> <span class=\"dv\">3</span> <span class=\"dv\">1</span> <span class=\"dv\">4</span> <span class=\"dv\">3</span> <span class=\"dv\">0</span> <span class=\"dv\">1</span> <span class=\"dv\">0</span> <span class=\"dv\">4</span> ]</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT <span class=\"dv\">0</span><span class=\"er\">2</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">5</span> <span class=\"dv\">4</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">5</span> <span class=\"dv\">8</span> <span class=\"dv\">0</span> <span class=\"dv\">5</span> <span class=\"dv\">1</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">1</span> <span class=\"dv\">4</span> <span class=\"dv\">2</span> <span class=\"dv\">5</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>[ <span class=\"dv\">3</span> <span class=\"dv\">1</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span> <span class=\"dv\">3</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span> <span class=\"dv\">2</span> <span class=\"dv\">0</span> ]</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01\n14 5\n9 4 3 9 1 2 4 5 1 1 9 7 0 5\n1 9 4 11 13\n======== EXPECT\n[ 1 6 3 1 4 3 0 1 0 4 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n5 4\n5 8 0 5 1\n1 4 2 5\n======== EXPECT\n[ 3 1 0 0 0 3 0 0 2 0 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n10 10\n6 6 7 7 2 8 9 2 0 0\n1 10 3 9 6 9 8 1 8 2\n======== EXPECT\n[ 5 0 13 0 0 0 6 11 7 8 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n10 10\n8 2 5 6 8 0 0 7 3 3\n1 9 7 2 4 2 9 10 9 6\n======== EXPECT\n[ 8 0 3 4 0 5 4 4 4 0 ]\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
