{
    "title": "@loop_ii: Imprimindo em linha",
    "description": "# Imprimindo em linha\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/loop_ii/cover.jpg)\n\n## Contecto\n\nEssa atividade ajuda a entender o uso de loops e a manipula\u00e7\u00e3o de intervalos em programa\u00e7\u00e3o. Voc\u00ea aprender\u00e1 a imprimir resultados formatados de forma leg\u00edvel.\n\nDado dois n\u00fameros inteiros **A** e **B**, fa\u00e7a um loop para imprimir todos os n\u00fameros inteiros entre **A** e **B**, excluindo **B**, na mesma linha entre colchetes.\n\n### Entrada\n\n- Dois n\u00fameros inteiros **A** e **B**, separados por espa\u00e7o.\n\n### Sa\u00edda\n\n- Uma linha com os n\u00fameros inteiros entre **A** e **B**, excluindo **B**, dentro de colchetes.\n\n### Restri\u00e7\u00f5es\n\n- **A** ser\u00e1 sempre menor ou igual a **B**.\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n1 10\n======== EXPECT\n[ 1 2 3 4 5 6 7 8 9 ]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n10 14\n======== EXPECT\n[ 10 11 12 13 ]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n-5 0\n======== EXPECT\n[ -5 -4 -3 -2 -1 ]\n<<<<<<<< FINISH\n\n```\n\n## Dicas\n\n### Programando em: C\n\n- Voc\u00ea pode receber os dois n\u00fameros em uma mesma linha usando o m\u00e9todo `scanf()`, como est\u00e1 representado a baixo:\n\n```C\nint main() {\n    int a = 0, b = 0;\n    scanf(\"%d %d\", &a, &b);\n}\n```\n\n```C\nint main() {\n    int a = 0, b = 0;\n    scanf(\"%d\", &a);\n    scanf(\"%d\",&b);\n}\n```\n\n- Voc\u00ea pode utilizar m\u00e9todos de intera\u00e7\u00e3o, como o loop `for` inicia com `i` igual a **A** e continua at\u00e9 que `i` seja menor que **B**. A cada itera\u00e7\u00e3o, o valor de `i` \u00e9 impresso usando `printf`, e `i` \u00e9 incrementado em **1**.\n\n```c\nint main() {\n    for (int i = A; i < B; i++) {\n        ...\n    }\n}\n```\n\n- O loop `while` verifica se `i` \u00e9 menor que *B* antes de executar. Inicialmente, `i` \u00e9 igual a **A**. O valor de `i` \u00e9 impresso, e `i` \u00e9 incrementado em **1** at\u00e9 que `i` n\u00e3o seja mais menor que B.\n\n```C\nint main() {\n    int i = A;\n    while (i < B) {\n        ...\n        i++;\n    }\n}\n```\n\n### Programando em: Python\n\n- Voc\u00ea pode receber os dois n\u00fameros em uma mesma linha usando o m\u00e9todo `map()`, como est\u00e1 representado abaixo:\n\n```py\na, b = map(int, input().split())\n```\n\n- Voc\u00ea pode utilizar m\u00e9todos de intera\u00e7\u00e3o, como o loop `for` itera sobre um intervalo de n\u00fameros de **A** at\u00e9 **B-1**. A fun\u00e7\u00e3o `range(A, B)` gera uma sequ\u00eancia de n\u00fameros come\u00e7ando em **A** e terminando em **B-1**. A cada itera\u00e7\u00e3o, o valor de `i` \u00e9 impresso usando `print`.\n\n```py\nfor i in range(A, B):\n    ...\n```\n\n- O loop `while` continua executando enquanto `i` for menor que **B**. Inicialmente, `i` \u00e9 definido com o valor de  **A**. Dentro do loop, o valor de `i` \u00e9 impresso e incrementado em **1** a cada itera\u00e7\u00e3o, at\u00e9 que `i` alcance o valor de **B** e a condi\u00e7\u00e3o deixe de ser verdadeira.\n\n```py\ni = A\nwhile i < B:\n    ...\n    i += 1\n```\n\n### Programando em: TypeScript\n\n- Voc\u00ea pode receber os dois n\u00fameros em uma mesma linha usando o m\u00e9todo `map()`, como est\u00e1 representado abaixo:\n\n```ts\nlet [a, b] : number = input().split(\" \").map(Number);\n```\n\n- Voc\u00ea pode utilizar m\u00e9todos de intera\u00e7\u00e3o como o loop `for` itera sobre um intervalo de n\u00fameros, come\u00e7ando em **A** e indo at\u00e9 **B-1**. A cada itera\u00e7\u00e3o, o valor de `i` \u00e9 impresso no console usando `console.log()` ou `write()`.\n\n```ts\nfor (let i = A; i < B; i++) {\n    ...\n}\n```\n\n- O loop `while` continua executando enquanto `i` for menor que **B**. Inicialmente, `i` \u00e9 definido com o valor de **A**. O valor de `i` \u00e9 impresso a cada itera\u00e7\u00e3o e `i` \u00e9 incrementado em **1** at\u00e9 que a condi\u00e7\u00e3o do loop n\u00e3o seja mais verdadeira.\n\n```ts\nlet i: number = A;\nwhile (i < B) {\n    ...\n    i++;\n}\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n1 10\n======== EXPECT\n[ 1 2 3 4 5 6 7 8 9 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10 14\n======== EXPECT\n[ 10 11 12 13 ]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n-5 0\n======== EXPECT\n[ -5 -4 -3 -2 -1 ]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
