{
    "title": "@c006constantes: @c006constantes",
    "description": "# @c006constantes\n\nDescri\u00e7\u00e3o no c\u00f3digo.\n\n[C\u00f3digo](https://github.com/qxcodefup/arcade/blob/master/base/c006constantes/.cache/draft.c)\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n======== EXPECT\nGravidade: 9.8\nValor de PI: 3.14159\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nGravidade: 9.8\nValor de PI: 3.14159\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "//ADD!\n#include <stdio.h>\n\nint main() {\n    // O que s\u00e3o constantes?\n    // Em C, constantes s\u00e3o valores que n\u00e3o podem ser alterados durante a execu\u00e7\u00e3o do programa.\n    // Elas s\u00e3o \u00fateis para representar valores fixos que n\u00e3o devem ser modificados, como pi, gravidade, etc.\n\n    // Como definir constantes?\n    // Existem duas maneiras principais de definir constantes em C:\n    //\n    // 1. Usando #define:\n    //    O #define \u00e9 uma diretiva do pr\u00e9-processador que cria um \"apelido\" para um valor fixo.\n    //    Ele n\u00e3o possui tipo e \u00e9 substitu\u00eddo diretamente pelo valor em tempo de compila\u00e7\u00e3o.\n    //\n    //    Exemplo:\n    //    #define NOME_CONSTANTE valor\n    //\n    // 2. Usando const:\n    //    A palavra-chave const define uma constante com um tipo espec\u00edfico.\n    //    Ao contr\u00e1rio do #define, as constantes com const respeitam os tipos de dados.\n    //\n    //    Exemplo:\n    //    const tipo nome_constante = valor;\n\n    // Agora \u00e9 sua vez!\n\n    // TODO: Defina uma constante chamada GRAVIDADE usando #define e atribua o valor 9.8.\n    //DEL!\n    #define GRAVIDADE 9.8\n    //ADD!\n    \n    // TODO: Defina uma constante chamada PI usando const e atribua o valor 3.14159.\n    //DEL!\n    const float PI = 3.14159;\n    //ADD!\n\n    // Como imprimir constantes?\n    // Assim como vari\u00e1veis, voc\u00ea pode imprimir o valor de constantes usando printf.\n    // No caso de GRAVIDADE e PI, use %f para n\u00fameros decimais (float ou double).\n    //\n    // Exemplo:\n    // printf(\"Valor: %f\\n\", NOME_CONSTANTE);\n\n    // TODO: Imprima o valor da constante GRAVIDADE.\n    //ACT!\n    // printf(\"Gravidade: ???\\n\", ???);  // Substitua ??? pelo nome da constante correta.\n    //DEL!\n    printf(\"Gravidade: %f\\n\", GRAVIDADE);\n    //ADD!\n\n    // TODO: Imprima o valor da constante PI.\n    //ACT!\n    // printf(\"Valor de PI: ???\\n\", ???);  // Substitua ??? pelo nome da constante correta.\n    //DEL!\n    printf(\"Valor de PI: %f\\n\", PI);\n    //ADD!\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
