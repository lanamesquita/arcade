{
    "title": "@c022strings: @c022strings",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@c022strings: @c022strings</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>@c022strings</h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<p><a href=\"https://github.com/qxcodefup/arcade/blob/master/base/c022strings/.cache/draft.c\">C\u00f3digo</a></p>\n<h2>Testes</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"n\">Destino</span> <span class=\"n\">ap\u00f3s</span> <span class=\"n\">strcpy</span><span class=\"p\">:</span> <span class=\"n\">Clings</span> <span class=\"n\">\u00e9</span> <span class=\"n\">Tech</span>\n<span class=\"n\">str1</span> <span class=\"n\">\u00e9</span> <span class=\"n\">menor</span> <span class=\"n\">que</span> <span class=\"n\">str2</span><span class=\"o\">.</span> <span class=\"n\">e</span> <span class=\"n\">str1</span> <span class=\"n\">\u00e9</span> <span class=\"n\">diferente</span> <span class=\"n\">str2</span><span class=\"o\">.</span>\n<span class=\"n\">O</span> <span class=\"n\">tamanho</span> <span class=\"n\">da</span> <span class=\"n\">string</span> <span class=\"n\">\u00e9</span><span class=\"p\">:</span> <span class=\"mi\">36</span>\n<span class=\"n\">Palavras</span> <span class=\"n\">na</span> <span class=\"n\">string</span><span class=\"p\">:</span>\n<span class=\"n\">Clings</span>\n<span class=\"n\">\u00e9</span>\n<span class=\"n\">meu</span>\n<span class=\"n\">melhor</span>\n<span class=\"n\">amigo</span>\n<span class=\"n\">de</span>\n<span class=\"n\">estudo</span>\n\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nDestino ap\u00f3s strcpy: Clings \u00e9 Tech\nstr1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.\nO tamanho da string \u00e9: 36\nPalavras na string:\nClings\n\u00e9\nmeu\nmelhor\namigo\nde\nestudo\n\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n#include <string.h>\n\n// Em C, strings s\u00e3o arrays de caracteres que terminam com o caractere nulo '\\0'.\n// A biblioteca <string.h> oferece v\u00e1rias fun\u00e7\u00f5es \u00fateis para manipula\u00e7\u00e3o de strings.\n\n// TODO: Vamos praticar uma fun\u00e7\u00e3o por vez, explorando as funcionalidades de cada uma.\n\nint main() {\n    // 1. C\u00f3pia de Strings com `strcpy`\n    // O `strcpy` permite copiar o conte\u00fado de uma string de origem para uma string de destino.\n    // TODO: Copie a string de `origem` para `destino` e exiba o resultado.\n    char origem[] = \"Clings \u00e9 Tech\";\n    char destino[20];\n    //DEL!\n    strcpy(destino, origem); // As duas strings ser\u00e3o iguais, essa fun\u00e7\u00e3o existe pois n\u00e3o podemos fazer a atribui\u00e7\u00e3o \"direta = origem\"; \n    printf(\"Destino ap\u00f3s strcpy: %s\\n\", destino);\n    //ACT!\n    // strcpy(???, ???); // As duas strings ser\u00e3o iguais, essa fun\u00e7\u00e3o existe pois n\u00e3o podemos fazer a atribui\u00e7\u00e3o \"direta = origem\"; \n    // printf(\"Destino ap\u00f3s strcpy: %s\\n\", ????);\n    //ADD!\n\n\n\n    // 2. Compara\u00e7\u00e3o de Strings com `strcmp`\n    // O `strcmp` compara duas strings caractere por caractere.\n    // E retorna:\n    // - Um valor negativo se a primeira string \u00e9 \"menor\" (vem antes na ordem lexicogr\u00e1fica),\n    // - Zero se as strings s\u00e3o iguais,\n    // - Um valor positivo se a primeira string \u00e9 \"maior\" (vem depois).\n    // TODO: Compare `str1` e `str2` e exiba o resultado.\n    char str1[] = \"Clings \u00e9 Pop\";\n    char str2[] = \"Clings \u00e9 Tudo\";\n    //DEL!\n    int resultado = strcmp(str1, str2);\n    if (resultado == 0) {\n        printf(\"As strings s\u00e3o iguais.\\n\");\n    } else if (resultado < 0) {\n        printf(\"str1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.\\n\");\n    } else {\n        printf(\"str1 \u00e9 maior que str2 e str1 \u00e9 diferente str2.\\n\");\n    }\n    //ACT!\n    // int resultado = strcmp(???, ???);\n    // if (??? == ???) {\n    //     printf(\"As strings s\u00e3o iguais.\\n\");\n    // } else if (??? < ???) {\n    //     printf(\"str1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.\\n\");\n    // } else {\n    //     printf(\"str1 \u00e9 maior que str2 e str1 \u00e9 diferente str2.\\n\");\n    // }\n    //ADD!\n    \n\n\n    // 3. Contar o Tamanho de uma String com `strlen`\n    // A fun\u00e7\u00e3o `strlen` retorna o n\u00famero de caracteres em uma string, excluindo o caractere nulo '\\0'.\n    // OBS: S\u00f3 funciona com vetores de char!\n    // TODO: Conte e exiba o n\u00famero de caracteres em `texto`.\n    char texto[] = \"Clings \u00e9 meu melhor amigo de estudo\";\n    //DEL!\n    int comprimento = strlen(texto);\n    printf(\"O tamanho da string \u00e9: %d\\n\", comprimento);\n    //ACT!\n    // int comprimento = strlen(???);\n    // printf(\"O tamanho da string \u00e9: %d\\n\", ???);\n    //ADD!\n\n\n\n    // 4. Divis\u00e3o de String em Palavras com `strtok`\n    // O `strtok` quebra uma string em substrings (tokens) usando um delimitador.\n    // Cada chamada a `strtok` retorna o pr\u00f3ximo token.\n    // TODO: Divida a string `texto` em palavras, usando espa\u00e7o (\" \") como delimitador, e exiba cada palavra separadamente.\n    char txt[] = \"C \u00e9 uma linguagem poderosa para manipula\u00e7\u00e3o de strings\";\n    //DEL!\n    char *token = strtok(texto, \" \");\n    printf(\"Palavras na string:\\n\");\n    while (token != NULL) {\n        printf(\"%s\\n\", token);\n        token = strtok(NULL, \" \");\n    }\n    //ACT!\n    // char *token = strtok(???, ???);\n    // printf(\"Palavras na string:\\n\");\n    // while (??? != NULL) {\n    //     printf(\"%s\\n\", token);\n    //     token = strtok(???, ???);\n    // }\n    //ADD!\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
