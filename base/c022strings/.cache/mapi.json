{
    "title": "@c022strings: @c022strings",
    "description": "# @c022strings\n\nDescri\u00e7\u00e3o no c\u00f3digo.\n\n[C\u00f3digo](https://github.com/qxcodefup/arcade/blob/master/base/c022strings/.cache/draft.c)\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n======== EXPECT\nDestino ap\u00f3s strcpy: Clings \u00e9 Tech\nstr1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.\nO tamanho da string \u00e9: 36\nPalavras na string:\nClings\n\u00e9\nmeu\nmelhor\namigo\nde\nestudo\n\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nDestino ap\u00f3s strcpy: Clings \u00e9 Tech\nstr1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.\nO tamanho da string \u00e9: 36\nPalavras na string:\nClings\n\u00e9\nmeu\nmelhor\namigo\nde\nestudo\n\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n#include <string.h>\n\n// Em C, strings s\u00e3o arrays de caracteres que terminam com o caractere nulo '\\0'.\n// A biblioteca <string.h> oferece v\u00e1rias fun\u00e7\u00f5es \u00fateis para manipula\u00e7\u00e3o de strings.\n\n// TODO: Vamos praticar uma fun\u00e7\u00e3o por vez, explorando as funcionalidades de cada uma.\n\nint main() {\n    // 1. C\u00f3pia de Strings com `strcpy`\n    // O `strcpy` permite copiar o conte\u00fado de uma string de origem para uma string de destino.\n    // TODO: Copie a string de `origem` para `destino` e exiba o resultado.\n    char origem[] = \"Clings \u00e9 Tech\";\n    char destino[20];\n    //DEL!\n    strcpy(destino, origem); // As duas strings ser\u00e3o iguais, essa fun\u00e7\u00e3o existe pois n\u00e3o podemos fazer a atribui\u00e7\u00e3o \"direta = origem\"; \n    printf(\"Destino ap\u00f3s strcpy: %s\\n\", destino);\n    //ACT!\n    // strcpy(???, ???); // As duas strings ser\u00e3o iguais, essa fun\u00e7\u00e3o existe pois n\u00e3o podemos fazer a atribui\u00e7\u00e3o \"direta = origem\"; \n    // printf(\"Destino ap\u00f3s strcpy: %s\\n\", ????);\n    //ADD!\n\n\n\n    // 2. Compara\u00e7\u00e3o de Strings com `strcmp`\n    // O `strcmp` compara duas strings caractere por caractere.\n    // E retorna:\n    // - Um valor negativo se a primeira string \u00e9 \"menor\" (vem antes na ordem lexicogr\u00e1fica),\n    // - Zero se as strings s\u00e3o iguais,\n    // - Um valor positivo se a primeira string \u00e9 \"maior\" (vem depois).\n    // TODO: Compare `str1` e `str2` e exiba o resultado.\n    char str1[] = \"Clings \u00e9 Pop\";\n    char str2[] = \"Clings \u00e9 Tudo\";\n    //DEL!\n    int resultado = strcmp(str1, str2);\n    if (resultado == 0) {\n        printf(\"As strings s\u00e3o iguais.\\n\");\n    } else if (resultado < 0) {\n        printf(\"str1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.\\n\");\n    } else {\n        printf(\"str1 \u00e9 maior que str2 e str1 \u00e9 diferente str2.\\n\");\n    }\n    //ACT!\n    // int resultado = strcmp(???, ???);\n    // if (??? == ???) {\n    //     printf(\"As strings s\u00e3o iguais.\\n\");\n    // } else if (??? < ???) {\n    //     printf(\"str1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.\\n\");\n    // } else {\n    //     printf(\"str1 \u00e9 maior que str2 e str1 \u00e9 diferente str2.\\n\");\n    // }\n    //ADD!\n    \n\n\n    // 3. Contar o Tamanho de uma String com `strlen`\n    // A fun\u00e7\u00e3o `strlen` retorna o n\u00famero de caracteres em uma string, excluindo o caractere nulo '\\0'.\n    // OBS: S\u00f3 funciona com vetores de char!\n    // TODO: Conte e exiba o n\u00famero de caracteres em `texto`.\n    char texto[] = \"Clings \u00e9 meu melhor amigo de estudo\";\n    //DEL!\n    int comprimento = strlen(texto);\n    printf(\"O tamanho da string \u00e9: %d\\n\", comprimento);\n    //ACT!\n    // int comprimento = strlen(???);\n    // printf(\"O tamanho da string \u00e9: %d\\n\", ???);\n    //ADD!\n\n\n\n    // 4. Divis\u00e3o de String em Palavras com `strtok`\n    // O `strtok` quebra uma string em substrings (tokens) usando um delimitador.\n    // Cada chamada a `strtok` retorna o pr\u00f3ximo token.\n    // TODO: Divida a string `texto` em palavras, usando espa\u00e7o (\" \") como delimitador, e exiba cada palavra separadamente.\n    char txt[] = \"C \u00e9 uma linguagem poderosa para manipula\u00e7\u00e3o de strings\";\n    //DEL!\n    char *token = strtok(texto, \" \");\n    printf(\"Palavras na string:\\n\");\n    while (token != NULL) {\n        printf(\"%s\\n\", token);\n        token = strtok(NULL, \" \");\n    }\n    //ACT!\n    // char *token = strtok(???, ???);\n    // printf(\"Palavras na string:\\n\");\n    // while (??? != NULL) {\n    //     printf(\"%s\\n\", token);\n    //     token = strtok(???, ???);\n    // }\n    //ADD!\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
