{
    "title": "@c022strings: @c022strings",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@c022strings: @c022strings</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"c022strings\"><span class=\"citation\"\ndata-cites=\"c022strings\">@c022strings</span></h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<p><a\nhref=\"https://github.com/qxcodefup/arcade/blob/master/base/c022strings/.cache/draft.c\">C\u00f3digo</a></p>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>Destino ap\u00f3s strcpy: Clings \u00e9 Tech</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>str1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>O tamanho da string \u00e9: <span class=\"dv\">36</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>Palavras na string:</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>Clings</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>\u00e9</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>meu</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>melhor</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>amigo</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>de</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>estudo</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nDestino ap\u00f3s strcpy: Clings \u00e9 Tech\nstr1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.\nO tamanho da string \u00e9: 36\nPalavras na string:\nClings\n\u00e9\nmeu\nmelhor\namigo\nde\nestudo\n\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [
        {
            "name": "draft.c",
            "contents": "#include <stdio.h>\n#include <string.h>\n\n// Em C, strings s\u00e3o arrays de caracteres que terminam com o caractere nulo '\\0'.\n// A biblioteca <string.h> oferece v\u00e1rias fun\u00e7\u00f5es \u00fateis para manipula\u00e7\u00e3o de strings.\n\n// TODO: Vamos praticar uma fun\u00e7\u00e3o por vez, explorando as funcionalidades de cada uma.\n\nint main() {\n    // 1. C\u00f3pia de Strings com `strcpy`\n    // O `strcpy` permite copiar o conte\u00fado de uma string de origem para uma string de destino.\n    // TODO: Copie a string de `origem` para `destino` e exiba o resultado.\n    char origem[] = \"Clings \u00e9 Tech\";\n    char destino[20];\n    strcpy(???, ???); // As duas strings ser\u00e3o iguais, essa fun\u00e7\u00e3o existe pois n\u00e3o podemos fazer a atribui\u00e7\u00e3o \"direta = origem\"; \n    printf(\"Destino ap\u00f3s strcpy: %s\\n\", ????);\n\n\n\n    // 2. Compara\u00e7\u00e3o de Strings com `strcmp`\n    // O `strcmp` compara duas strings caractere por caractere.\n    // E retorna:\n    // - Um valor negativo se a primeira string \u00e9 \"menor\" (vem antes na ordem lexicogr\u00e1fica),\n    // - Zero se as strings s\u00e3o iguais,\n    // - Um valor positivo se a primeira string \u00e9 \"maior\" (vem depois).\n    // TODO: Compare `str1` e `str2` e exiba o resultado.\n    char str1[] = \"Clings \u00e9 Pop\";\n    char str2[] = \"Clings \u00e9 Tudo\";\n    int resultado = strcmp(???, ???);\n    if (??? == ???) {\n        printf(\"As strings s\u00e3o iguais.\\n\");\n    } else if (??? < ???) {\n        printf(\"str1 \u00e9 menor que str2. e str1 \u00e9 diferente str2.\\n\");\n    } else {\n        printf(\"str1 \u00e9 maior que str2 e str1 \u00e9 diferente str2.\\n\");\n    }\n    \n\n\n    // 3. Contar o Tamanho de uma String com `strlen`\n    // A fun\u00e7\u00e3o `strlen` retorna o n\u00famero de caracteres em uma string, excluindo o caractere nulo '\\0'.\n    // OBS: S\u00f3 funciona com vetores de char!\n    // TODO: Conte e exiba o n\u00famero de caracteres em `texto`.\n    char texto[] = \"Clings \u00e9 meu melhor amigo de estudo\";\n    int comprimento = strlen(???);\n    printf(\"O tamanho da string \u00e9: %d\\n\", ???);\n\n\n\n    // 4. Divis\u00e3o de String em Palavras com `strtok`\n    // O `strtok` quebra uma string em substrings (tokens) usando um delimitador.\n    // Cada chamada a `strtok` retorna o pr\u00f3ximo token.\n    // TODO: Divida a string `texto` em palavras, usando espa\u00e7o (\" \") como delimitador, e exiba cada palavra separadamente.\n    char txt[] = \"C \u00e9 uma linguagem poderosa para manipula\u00e7\u00e3o de strings\";\n    char *token = strtok(???, ???);\n    printf(\"Palavras na string:\\n\");\n    while (??? != NULL) {\n        printf(\"%s\\n\", token);\n        token = strtok(???, ???);\n    }\n\n    return 0;\n}",
            "encoding": 0
        }
    ],
    "draft": {}
}
