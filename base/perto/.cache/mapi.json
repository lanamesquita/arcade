{
    "title": "@perto: Pontos como structs",
    "description": "# Pontos como structs\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/perto/cover.jpg)\n\nConsidere o seguinte tipo de registro que deve ser usado em seu programa:\n\n```C\ntypedef struct{\n     float x; \n     float y;\n}Ponto;\n```\n\nImplemente um fun\u00e7\u00e3o que recebe n pontos distintos e um `Ponto p` e devolva o ponto mais pr\u00f3ximo de p entre os n pontos distintos. A fun\u00e7\u00e3o tem o seguint prot\u00f3tipo:\n\n```c\nPonto proximo(Ponto vetor[], int n, Ponto p);\n```\n\nDica: Para isso, implemente uma fun\u00e7\u00e3o que recebe dois pontos e calcule a dist\u00e2ncia entre esse dois pontos.\n\n```c\nfloat distancia(Ponto p1, Ponto p2);\n```\n\nO programa principal \u00e9 o seguinte:\n\n```c\n#include <stdio.h>\n#include <math.h>\n\ntypedef struct {\n    float x,y;\n} Ponto;\n\nPonto proximo(Ponto vetor[], int n, Ponto p);\n\nint main(){\n    \n    Ponto p = {2,4};\n    Ponto vet[] = { {3,6}, {1,6}, {5,7}, {3,9}, {4,9} };\n    Ponto q = proximo(vet, 5, p);\n    printf(\"%.2f %.2f\\n\", q.x, q.y); //3.00 6.00 \n}\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT Test 1\n2 4\n5\n3 6\n1 6\n5 7\n3 9\n4 9\n======== EXPECT\n3.00 6.00\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT Test 2\n2.9 4.8\n5\n71.8 6.6\n10 66.3\n9.6 7.6\n30.9 9.66\n4.6 9.7\n======== EXPECT\n4.60 9.70\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
