{
    "title": "@c011bitwise: @c011bitwise",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@c011bitwise: @c011bitwise</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"c011bitwise\"><span class=\"citation\"\ndata-cites=\"c011bitwise\">@c011bitwise</span></h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">4</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">40</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">4</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">11</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dv\">5</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\n4\n40\n4\n11\n5\n\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n\nint main() {\n    // O que \u00e9 manipula\u00e7\u00e3o de bits (bitwise)?\n    // Manipula\u00e7\u00e3o de bits envolve alterar diretamente os bits individuais que comp\u00f5em um n\u00famero. (lembre-se que, por uma quest\u00e3o de efici\u00eancia, computadores processam TUDO em bin\u00e1rio (0 e 1))\n    // Ent\u00e3o, \u00e9 como se manipul\u00e1ssemos a raiz do que o computador ir\u00e1 compreender do c\u00f3digo.\n    // Em C, tamb\u00e9m podemos usar opera\u00e7\u00f5es bitwise para realizar tarefas como troca de valores e otimiza\u00e7\u00e3o de c\u00e1lculos.\n    \n    // Lembre-se: 1 byte = 8 bits.\n    \n    // Principais operadores bitwise:\n    // << : Desloca os bits \u00e0 esquerda (multiplica por pot\u00eancias de 2)\n    // >> : Desloca os bits \u00e0 direita (divide por pot\u00eancias de 2)\n    // &  : AND bit a bit (compara dois bits e retorna 1 se ambos forem 1)\n    // |  : OR bit a bit (compara dois bits e retorna 1 se qualquer um dos dois for 1)\n    // ^  : XOR bit a bit (compara dois bits e retorna 1 se forem diferentes)\n    \n    // Vamos praticar alguns exemplos de manipula\u00e7\u00e3o de bits:\n\n    // SHIFT RIGHT (Deslocamento \u00e0 direita):\n    // TODO: Printe o resultado do deslocamento \u00e0 direita de 16 por 2 posi\u00e7\u00f5es\n    // Dica: 16 em bin\u00e1rio \u00e9 10000, e deslocar \u00e0 direita divide o n\u00famero por 2^n.\n    //DEL!\n    printf(\"%d\\n\", 16 >> 2);\n    //ACT!\n    // printf(\"%d\\n\", 16 ??? 2);\n    //ADD!\n\n    // SHIFT LEFT (Deslocamento \u00e0 esquerda):\n    // TODO: Printe o resultado do deslocamento \u00e0 esquerda de 5 por 3 posi\u00e7\u00f5es\n    // Dica: Deslocar \u00e0 esquerda multiplica o n\u00famero por 2^n.\n    //DEL!\n    printf(\"%d\\n\", 5 << 3);\n    //ACT!\n    // printf(\"%d\\n\", 5 ??? 3);\n    //ADD!\n\n    // AND BITWISE:\n    // TODO: Printe o resultado de 12 AND 5 \n    // Dica: 12 = 1100, 5 = 0101, e o AND retorna 1 se ambos os bits forem 1.\n    //DEL!\n    printf(\"%d\\n\", 12 & 5);\n    //ACT!\n    // printf(\"%d\\n\", 12 ??? 5);\n    //ADD!\n\n    // OR BITWISE:\n    // TODO: Printe o resultado de 8 OR 3 \n    // Dica: 8 = 1000, 3 = 0011, e o OR retorna 1 se qualquer um dos bits for 1.\n    //DEL!\n    printf(\"%d\\n\", 8 | 3);\n    //ACT!\n    // printf(\"%d\\n\", 8 ??? 3);\n    //ADD!\n\n    // XOR BITWISE:\n    // TODO: Printe o resultado de 7 XOR 2 \n    // Dica: XOR retorna 1 se os bits forem diferentes.\n    //DEL!\n    printf(\"%d\\n\", 7 ^ 2);\n    //ACT!\n    // printf(\"%d\\n\", 7 ??? 2);\n    //ADD!\n\n    return 0;\n}\n",
                "encoding": 0
            }
        ]
    }
}
