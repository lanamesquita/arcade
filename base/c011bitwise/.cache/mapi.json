{
    "title": "@c011bitwise: @c011bitwise",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@c011bitwise: @c011bitwise</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>@c011bitwise</h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<h2>Testes</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"mi\">4</span>\n<span class=\"mi\">40</span>\n<span class=\"mi\">4</span>\n<span class=\"mi\">11</span>\n<span class=\"mi\">5</span>\n\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\n4\n40\n4\n11\n5\n\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n\nint main() {\n    // O que \u00e9 manipula\u00e7\u00e3o de bits (bitwise)?\n    // Manipula\u00e7\u00e3o de bits envolve alterar diretamente os bits individuais que comp\u00f5em um n\u00famero. (lembre-se que, por uma quest\u00e3o de efici\u00eancia, computadores processam TUDO em bin\u00e1rio (0 e 1))\n    // Ent\u00e3o, \u00e9 como se manipul\u00e1ssemos a raiz do que o computador ir\u00e1 compreender do c\u00f3digo.\n    // Em C, tamb\u00e9m podemos usar opera\u00e7\u00f5es bitwise para realizar tarefas como troca de valores e otimiza\u00e7\u00e3o de c\u00e1lculos.\n    \n    // Lembre-se: 1 byte = 8 bits.\n    \n    // Principais operadores bitwise:\n    // << : Desloca os bits \u00e0 esquerda (multiplica por pot\u00eancias de 2)\n    // >> : Desloca os bits \u00e0 direita (divide por pot\u00eancias de 2)\n    // &  : AND bit a bit (compara dois bits e retorna 1 se ambos forem 1)\n    // |  : OR bit a bit (compara dois bits e retorna 1 se qualquer um dos dois for 1)\n    // ^  : XOR bit a bit (compara dois bits e retorna 1 se forem diferentes)\n    \n    // Vamos praticar alguns exemplos de manipula\u00e7\u00e3o de bits:\n\n    // SHIFT RIGHT (Deslocamento \u00e0 direita):\n    // TODO: Printe o resultado do deslocamento \u00e0 direita de 16 por 2 posi\u00e7\u00f5es\n    // Dica: 16 em bin\u00e1rio \u00e9 10000, e deslocar \u00e0 direita divide o n\u00famero por 2^n.\n    //DEL!\n    printf(\"%d\\n\", 16 >> 2);\n    //ACT!\n    // printf(\"%d\\n\", 16 ??? 2);\n    //ADD!\n\n    // SHIFT LEFT (Deslocamento \u00e0 esquerda):\n    // TODO: Printe o resultado do deslocamento \u00e0 esquerda de 5 por 3 posi\u00e7\u00f5es\n    // Dica: Deslocar \u00e0 esquerda multiplica o n\u00famero por 2^n.\n    //DEL!\n    printf(\"%d\\n\", 5 << 3);\n    //ACT!\n    // printf(\"%d\\n\", 5 ??? 3);\n    //ADD!\n\n    // AND BITWISE:\n    // TODO: Printe o resultado de 12 AND 5 \n    // Dica: 12 = 1100, 5 = 0101, e o AND retorna 1 se ambos os bits forem 1.\n    //DEL!\n    printf(\"%d\\n\", 12 & 5);\n    //ACT!\n    // printf(\"%d\\n\", 12 ??? 5);\n    //ADD!\n\n    // OR BITWISE:\n    // TODO: Printe o resultado de 8 OR 3 \n    // Dica: 8 = 1000, 3 = 0011, e o OR retorna 1 se qualquer um dos bits for 1.\n    //DEL!\n    printf(\"%d\\n\", 8 | 3);\n    //ACT!\n    // printf(\"%d\\n\", 8 ??? 3);\n    //ADD!\n\n    // XOR BITWISE:\n    // TODO: Printe o resultado de 7 XOR 2 \n    // Dica: XOR retorna 1 se os bits forem diferentes.\n    //DEL!\n    printf(\"%d\\n\", 7 ^ 2);\n    //ACT!\n    // printf(\"%d\\n\", 7 ??? 2);\n    //ADD!\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
