{
    "title": "@c014loops: @c014loops",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@c014loops: @c014loops</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>@c014loops</h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<p><a href=\"https://github.com/qxcodefup/arcade/blob/master/base/c014loops/.cache/draft.c\">C\u00f3digo</a></p>\n<h2>Testes</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"n\">For</span> <span class=\"n\">loop</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span>\n<span class=\"n\">While</span> <span class=\"n\">loop</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span>\n<span class=\"n\">Do</span><span class=\"o\">-</span><span class=\"n\">While</span> <span class=\"n\">loop</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nFor loop: 0 1 2 3 4\nWhile loop: 0 1 2 3 4\nDo-While loop: 0 1 2 3 4\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "//ADD!\n#include <stdio.h>\n\nint main() {\n    // Estruturas de repeti\u00e7\u00e3o (loops) s\u00e3o usadas para repetir um bloco de c\u00f3digo enquanto uma condi\u00e7\u00e3o for verdadeira.\n\n    // Existem tr\u00eas tipos principais de loops em C:\n    // 1. For loop\n    // 2. While loop\n    // 3. Do-while loop\n\n    // Vamos ver cada um deles:\n\n    // Exemplo 1: For loop\n    // O for loop \u00e9 usado quando sabemos o n\u00famero exato de repeti\u00e7\u00f5es.\n    // Ele tem a seguinte sintaxe:\n    // for (inicializa\u00e7\u00e3o; condi\u00e7\u00e3o; incremento) {\n    //     // c\u00f3digo a ser repetido\n    // }\n    printf(\"For loop: \");\n    //ACT!\n    // for (int i = 0; i < 5 i++) {  // erro: falta ponto e v\u00edrgula\n    //     printf(\"%d \", i);\n    // }\n    //DEL!\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", i);\n    }\n    //ADD!\n    printf(\"\\n\");\n\n    // Exemplo 2: While loop\n    // O while loop continua a repetir enquanto a condi\u00e7\u00e3o for verdadeira.\n    // A sintaxe \u00e9:\n    // while (condi\u00e7\u00e3o) {\n    //     // c\u00f3digo a ser repetido\n    // }\n    printf(\"While loop: \");\n    int j = 0;\n    //ACT!\n    // while j < 5 {  // erro: falta par\u00eanteses\n    //     printf(\"%d \", j);\n    //     j++;\n    // }\n    //DEL!\n    while (j < 5) {\n        printf(\"%d \", j);\n        j++;\n    }\n    //ADD!\n    printf(\"\\n\");\n\n    // Exemplo 3: Do-While loop\n    // O do-while loop garante que o bloco de c\u00f3digo seja executado pelo menos uma vez,\n    // mesmo que a condi\u00e7\u00e3o seja falsa, pois a verifica\u00e7\u00e3o ocorre no final.\n    // A sintaxe \u00e9:\n    // do {\n    //     // c\u00f3digo a ser repetido\n    // } while (condi\u00e7\u00e3o);\n    printf(\"Do-While loop: \");\n    int k = 0;\n    //ACT!\n    // do {\n    //     printf(\"%d \", k);\n    //     k++;\n    // } while k < 5; // erro: falta par\u00eanteses\n    //DEL!\n    do {\n        printf(\"%d \", k);\n        k++;\n    } while (k < 5);\n    //ADD!\n    printf(\"\\n\");\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
