{
    "title": "@pr_game21: Blackjack 21",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@pr_game21: Blackjack 21</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Blackjack 21</h1>\n<p>Voc\u00ea ir\u00e1 implementar uma vers\u00e3o simplificada do jogo <strong>Blackjack 21</strong>, tamb\u00e9m conhecido como \u201cvinte e um\u201d, onde um jogador humano enfrenta a mesa (computador). A atividade pode feita em tr\u00eas etapas, com aumento progressivo na complexidade.</p>\n<p>Para conhecer melhor o jogo original, consulte:  </p>\n<ul>\n<li><a href=\"http://pt.wikipedia.org/wiki/Blackjack\">http://pt.wikipedia.org/wiki/Blackjack</a>  </li>\n</ul>\n<p><img alt=\"Blackjack\" src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/pr_game21/blackjack.jpg\" /></p>\n<hr />\n<h2>Regras Simplificadas</h2>\n<ul>\n<li>Cartas de 2 a 10 valem seus pr\u00f3prios valores.</li>\n<li>Valete (J), Dama (Q) e Rei (K) valem 10 pontos.</li>\n<li>\u00c1s (A) pode valer 1 ou 11, o que for mais vantajoso. Se a soma estourar 21, transforme o(s) \u00c1s em 1 at\u00e9 que a soma fique v\u00e1lida ou estoure de vez.</li>\n</ul>\n<hr />\n<h2>Funcionamento do Jogo</h2>\n<ul>\n<li>O jogador come\u00e7a com <strong>2 cartas</strong>. A mesa come\u00e7a com <strong>1 carta vis\u00edvel</strong>.</li>\n<li>O jogador pode <strong>pedir carta (1)</strong> ou <strong>parar (2)</strong>. Se estourar 21, perde.</li>\n<li>Quando o jogador para, a mesa joga at\u00e9 vencer ou estourar.</li>\n<li>Em caso de empate de pontos, <strong>a mesa vence</strong>.</li>\n</ul>\n<p>Linhas com <code>&gt;&gt;</code> indicam que o programa est\u00e1 esperando uma entrada do jogador.</p>\n<hr />\n<h2>Etapa 1 \u2013 Primeira Vers\u00e3o</h2>\n<p>Implemente uma \u00fanica rodada entre jogador e mesa, com as seguintes intera\u00e7\u00f5es:</p>\n<div class=\"language-text highlight\"><pre><span></span><code>Iniciando Rodada:\n# Mesa recebe  7 - Total  7 [ 7 ]\n# Voce recebe  A - Total 11 [ A ]\n# Voce recebe  2 - Total 13 [ A 2 ]\nPedir = 1, Parar = 2 \n&gt;&gt; 1\n# Voce recebe  3 - Total 16 [ A 2 3 ]\nPedir = 1, Parar = 2 \n&gt;&gt; 2\n# Mesa joga, calcula e exibe o resultado final\n</code></pre></div>\n<hr />\n<h2>Etapa 2 \u2013 Apostas e M\u00faltiplas Rodadas</h2>\n<p>Adicione:</p>\n<ul>\n<li>Sistema de apostas com <strong>m\u00ednimo de 5 e m\u00e1ximo de 100</strong>.</li>\n<li>Saldo inicial: <strong>100</strong> unidades de dinheiro.</li>\n<li>Se ganhar, recebe <strong>o dobro da aposta</strong>.</li>\n<li>O jogador pode sair a qualquer momento digitando <strong>-1</strong> como valor da aposta.</li>\n</ul>\n<div class=\"language-text highlight\"><pre><span></span><code>Rodada 1:\nDinheiro: 100\nDigite valor da aposta ou -1 para sair: 25\n...\nRodada 2:\nDinheiro: 75\nDigite valor da aposta ou -1 para sair: 50\n...\n</code></pre></div>\n<hr />\n<h2>Etapa 3 \u2013 Valida\u00e7\u00e3o de Entradas</h2>\n<p>Adicione verifica\u00e7\u00e3o de entradas em todos os momentos:</p>\n<ul>\n<li>Apostas devem ser num\u00e9ricas e dentro dos limites.</li>\n<li>Op\u00e7\u00f5es de a\u00e7\u00e3o devem ser v\u00e1lidas (1 ou 2).</li>\n<li>Tratamento de erros como textos, valores fora do intervalo, negativos etc.</li>\n</ul>\n<div class=\"language-text highlight\"><pre><span></span><code>Digite valor da aposta ou -1 para sair: vinte\nValor inv\u00e1lido.\nDigite valor da aposta ou -1 para sair: 300\nValor inv\u00e1lido.\n...\nPedir = 1, Parar = 2\n&gt;&gt; batatas\nValor inv\u00e1lido.\n</code></pre></div>\n<hr />\n<h2>Desafio Opcional</h2>\n<p>Se quiser ir al\u00e9m:</p>\n<ul>\n<li>Adicione <strong>m\u00faltiplos jogadores</strong>, com turnos alternados.</li>\n<li>Implemente regras extras como <strong>dobrar aposta</strong> ou <strong>dividir cartas</strong> (\u201csplit\u201d).</li>\n</ul>\n<hr />\n<p>Bom trabalho e divirta-se programando!</p>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "type": "hide"
        }
    ],
    "draft": {}
}
