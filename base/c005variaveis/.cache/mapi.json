{
    "title": "@c005variaveis: @c005variaveis",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@c005variaveis: @c005variaveis</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>@c005variaveis</h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<p><a href=\"https://github.com/qxcodefup/arcade/blob/master/base/c005variaveis/.cache/draft.c\">C\u00f3digo</a></p>\n<p><a href=\"https://github.com/qxcodefup/arcade/blob/master/base/c005variaveis/.cache/draft.c\">C\u00f3digo</a></p>\n<h2>Testes</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"n\">Idade</span>  <span class=\"p\">:</span> <span class=\"mi\">20</span>\n<span class=\"n\">Altura</span> <span class=\"p\">:</span> <span class=\"mf\">1.75</span>\n<span class=\"n\">Letra</span>  <span class=\"p\">:</span> <span class=\"n\">A</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nIdade  : 20\nAltura : 1.75\nLetra  : A\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "//ADD!\n#include <stdio.h>\n\nint main() {\n    // O que s\u00e3o vari\u00e1veis?\n    // Em C, uma vari\u00e1vel \u00e9 um espa\u00e7o na mem\u00f3ria onde voc\u00ea pode armazenar um valor.\n    // Vari\u00e1veis possuem nomes para facilitar o acesso aos valores.\n    // Esses valores podem mudar durante a execu\u00e7\u00e3o do programa.\n\n    // O que s\u00e3o tipos?\n    // Em C, os tipos de dados determinam o tipo de valor que uma vari\u00e1vel pode armazenar.\n    // Existem v\u00e1rios tipos de dados, e cada um serve para armazenar diferentes formas de informa\u00e7\u00e3o.\n    // Por exemplo:\n    // - int: usado para armazenar n\u00fameros inteiros (ex: 10, 20, -5).\n    // - float: usado para armazenar n\u00fameros decimais de precis\u00e3o simples (ex: 1.75, 3.14).\n    // - char: usado para armazenar um \u00fanico caractere (ex: 'A', 'b').\n\n    // Como declarar vari\u00e1veis?\n    // Para declarar uma vari\u00e1vel, voc\u00ea precisa especificar seu tipo e dar um nome a ela.\n    // Aqui est\u00e1 um modelo gen\u00e9rico de como declarar vari\u00e1veis:\n    // tipo nome_da_variavel = valor_inicial;\n\n    // Exemplo:\n    // int idade = 30; // Declaramos uma vari\u00e1vel do tipo int com o nome \"idade\" e valor 30.\n\n    // Como imprimir vari\u00e1veis?\n    // Para imprimir vari\u00e1veis na tela, usamos a fun\u00e7\u00e3o printf.\n    // O printf permite que voc\u00ea insira vari\u00e1veis em uma string formatada,\n    // onde voc\u00ea usa especificadores de formato para indicar o tipo da vari\u00e1vel.\n    // Especificadores comuns:\n    // - %d: para imprimir vari\u00e1veis do tipo int (inteiro).\n    // - %f: para imprimir vari\u00e1veis do tipo float (decimal).\n    // - %c: para imprimir vari\u00e1veis do tipo char (caractere).\n    // Exemplo de uso:\n    // printf(\"Idade: %d\\n\", idade); // Substitua %d pelo especificador correto.\n\n    // Agora \u00e9 sua vez!\n\n    // TODO: Declare uma vari\u00e1vel int chamada \"idade\" e atribua a ela o valor 20.\n    // TODO: Declare uma vari\u00e1vel float chamada \"altura\" e atribua a ela o valor 1.75.\n    // TODO: Declare uma vari\u00e1vel char chamada \"letra\" e atribua a ela o caractere 'A'.\n    //DEL!\n    int idade = 20;\n    float altura = 1.75;\n    char letra = 'A';\n    //ADD!\n\n    // Imprima as vari\u00e1veis na tela utilizando printf e os especificadores corretos.\n    //ACT!\n    // printf(\"Idade  : ???\\n\", ???);  // TODO: Substitua ??? pelo especificador e vari\u00e1vel correta\n    // printf(\"Altura : ???\\n\", ???);  // TODO: Substitua ??? pelo especificador e vari\u00e1vel correta\n    // printf(\"Letra  : ???\\n\", ???);  // TODO: Substitua ??? pelo especificador e vari\u00e1vel correta\n    //DEL!\n    printf(\"Idade  : %d\\n\", idade);\n    printf(\"Altura : %f\\n\", altura);\n    printf(\"Letra  : %c\\n\", letra);\n    //ADD!\n\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
