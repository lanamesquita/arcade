{
    "title": "@loop_i: Treino de loop",
    "description": "# Treino de loop\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/loop_i/cover.jpg)\n\n## Contexto\n\nMuitas vezes precisamos imprimir uma sequ\u00eancia de n\u00fameros inteiros dentro de um intervalo, excluindo o valor de limite superior. Esse exerc\u00edcio vai te ajudar a praticar o uso de loops para imprimir valores entre dois n\u00fameros.\n\nDado dois n\u00fameros inteiros **A** e **B**, fa\u00e7a um loop para imprimir todos os n\u00fameros inteiros entre **A** e **B**, excluindo **B**.\n\n### Entrada\n\n- A primeira linha cont\u00e9m o n\u00famero inteiro **A**.\n- A segunda linha cont\u00e9m o n\u00famero inteiro **B**.\n\n### Sa\u00edda\n\n- Imprima todos os n\u00fameros inteiros de **A** at\u00e9 **B-1**, um por linha.\n\n### Retri\u00e7\u00f5es\n\n- **A** ser\u00e1 sempre menor ou igual a **B**.\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n1\n10\n======== EXPECT\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n10\n14\n======== EXPECT\n10\n11\n12\n13\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n-5\n0\n======== EXPECT\n-5\n-4\n-3\n-2\n-1\n<<<<<<<< FINISH\n\n```\n\n## Dicas\n\n### Programando em: C\n\n- Voc\u00ea pode utilizar m\u00e9todos de intera\u00e7\u00e3o, como o loop `for` inicia com `i` igual a **A** e continua at\u00e9 que `i` seja menor que **B**. A cada itera\u00e7\u00e3o, o valor de `i` \u00e9 impresso usando `printf`, e `i` \u00e9 incrementado em **1**.\n\n```c\nint main() {\n    for (int i = A; i < B; i++) {\n        ...\n    }\n}\n```\n\n- O loop `while` verifica se `i` \u00e9 menor que *B* antes de executar. Inicialmente, `i` \u00e9 igual a **A**. O valor de `i` \u00e9 impresso, e `i` \u00e9 incrementado em **1** at\u00e9 que `i` n\u00e3o seja mais menor que B.\n\n```C\nint main() {\n    int i = A;\n    while (i < B) {\n        ...\n        i++;\n    }\n}\n```\n\n### Programando em: Python\n\n- Voc\u00ea pode utilizar m\u00e9todos de intera\u00e7\u00e3o, como o loop `for` itera sobre um intervalo de n\u00fameros de **A** at\u00e9 **B-1**. A fun\u00e7\u00e3o `range(A, B)` gera uma sequ\u00eancia de n\u00fameros come\u00e7ando em **A** e terminando em **B-1**. A cada itera\u00e7\u00e3o, o valor de `i` \u00e9 impresso usando `print`.\n\n```py\nfor i in range(A, B):\n    ...\n```\n\n- O loop `while` continua executando enquanto `i` for menor que **B**. Inicialmente, `i` \u00e9 definido com o valor de  **A**. Dentro do loop, o valor de `i` \u00e9 impresso e incrementado em **1** a cada itera\u00e7\u00e3o, at\u00e9 que `i` alcance o valor de **B** e a condi\u00e7\u00e3o deixe de ser verdadeira.\n\n```py\ni = A\nwhile i < B:\n    ...\n    i += 1\n```\n\n### Programando em: TypeScript\n\n- Voc\u00ea pode utilizar m\u00e9todos de intera\u00e7\u00e3o como o loop `for` itera sobre um intervalo de n\u00fameros, come\u00e7ando em **A** e indo at\u00e9 **B-1**. A cada itera\u00e7\u00e3o, o valor de `i` \u00e9 impresso no console usando `console.log()` ou `write()`.\n\n```ts\nfor (let i = A; i < B; i++) {\n    ...\n}\n```\n\n- O loop `while` continua executando enquanto `i` for menor que **B**. Inicialmente, `i` \u00e9 definido com o valor de **A**. O valor de `i` \u00e9 impresso a cada itera\u00e7\u00e3o e `i` \u00e9 incrementado em **1** at\u00e9 que a condi\u00e7\u00e3o do loop n\u00e3o seja mais verdadeira.\n\n```ts\nlet i: number = A;\nwhile (i < B) {\n    ...\n    i++;\n}\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n1\n10\n======== EXPECT\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n10\n14\n======== EXPECT\n10\n11\n12\n13\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n-5\n0\n======== EXPECT\n-5\n-4\n-3\n-2\n-1\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
