{
    "title": "@bala: Dist\u00e2ncia entre dois pontos",
    "description": "# Dist\u00e2ncia entre dois pontos\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/bala/cover.jpg)\n\n## Contexto\n\nUm atirador de elite estava atirando a 400 metros de dist\u00e2ncia em um papel milimetrado. Para calcular a imprecis\u00e3o da arma, ele dava dois tiros e media a dist\u00e2ncia entre eles. Como ele n\u00e3o tinha uma r\u00e9gua, ele pegou as coordenadas dos pontos no plano cartesiano e usou a f\u00f3rmula da dist\u00e2ncia entre dois pontos.\n\n$$d_{AB} = \\sqrt{(x\u2082 - x\u2081)^2 + (y\u2082 - y\u2081)^2}$$\n\nDada a f\u00f3rmula da dist\u00e2ncia entre dois pontos e os valores x e y de cada ponto, imprima a dist\u00e2ncia entre os pontos com duas casas decimais.\n\n### Entrada\n\n- Coordenada ***X*** e coordenada ***Y*** do primeiro ponto.\n- Coordenada ***X*** e coordenada ***Y*** do segundo ponto.\n\n#### Sa\u00edda\n\n- A dist\u00e2ncia entre os pontos com duas casas decimais.\n\n## Testes\n\n```py\n>>>>>>>> INSERT 01\n3\n7\n1\n4\n======== EXPECT\n3.61\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 02\n1\n8.2\n-4\n12\n======== EXPECT\n6.28\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT 03\n3\n1\n3\n5\n======== EXPECT\n4.00\n<<<<<<<< FINISH\n\n```\n\n## Dicas\n\n### Programando em: C\n\n- Para exibir um n\u00famero de ponto flutuante, do tipo `float`, com duas casas decimais em C, utilize o especificador de formato `%.2f` na fun\u00e7\u00e3o `printf`. O n\u00famero **2** ap\u00f3s o ponto indica a quantidade de casas decimais a serem exibidas.\n\n```c\nint main() {\n    float resultado;\n    printf(\"%.2f\\n\", resultado);\n}\n```\n\n- Para calcular a raiz quadrada em C, voc\u00ea deve incluir a biblioteca `math.h` em seu projeto e utilizar a fun\u00e7\u00e3o `sqrt()` passando como argumento o valor do qual deseja encontrar a raiz.\n\n```c\n#include <math.h>\nint main() {\n    raiz = sqtr(numero);\n}\n```\n\n- A fun\u00e7\u00e3o `pow()` da biblioteca `math.h` \u00e9 a maneira mais direta de elevar um n\u00famero a qualquer pot\u00eancia em C. Para elevar um n\u00famero ao quadrado, basta passar o n\u00famero como primeiro argumento e 2 como segundo argumento.\n\n```c\n#include <math.h>\nint main() {\n    quadrado = pow(numero, 2);\n}\n```\n\n### Programando em: Python\n\n- Para exibir um n\u00famero de ponto flutuante com duas casas decimais em Python, utilize o formato `:.2f` dentro da fun\u00e7\u00e3o `print`. O n\u00famero **2** ap\u00f3s o ponto indica o n\u00famero de casas decimais que ser\u00e3o exibidas:\n\n```py\nprint(f\"{resultado:.2f}\")\n```\n\n```py\nprint(\"{:.2f}\".format(resultado))\n```\n\n- Em Python, o c\u00e1lculo da raiz quadrada \u00e9 bastante simples e direto. Basta importar o m\u00f3dulo math e utilizar a fun\u00e7\u00e3o `sqrt()`\n\n```py\nimport math\nraiz = math.sqtr(numero)\n```\n\n- Em Python, temos duas formas principais de elevar um n\u00famero ao quadrado:\n\n```py\nimport math\nquadrado = math.pow(numero, 2)\n```\n\n```py\nquadrado =  numero ** 2\n```\n\n### Programando em: TypeScript\n\n- Para exibir um n\u00famero com duas casas decimais em TypeScript, utilize o m\u00e9todo `toFixed(2)` do objeto `Number`. O n\u00famero **2** especifica a quantidade de casas decimais que ser\u00e3o exibidas ap\u00f3s o ponto decimal:\n\n```ts\nconsole.log(resultado.toFixed(2)); \n```\n\n```ts\nwrite(resultado.toFixed(2));\n```\n\n- Em TypeScript, a abordagem \u00e9 semelhante \u00e0 do JavaScript. N\u00e3o h\u00e1 uma biblioteca padr\u00e3o para fun\u00e7\u00f5es matem\u00e1ticas, mas podemos utilizar a biblioteca Math global.\n\n```ts\nlet raiz: number = Math.sqrt(numero);\n```\n\n- Em TypeScript, temos duas formas principais de elevar um n\u00famero ao quadrado:\n\n```ts\nlet quadrado: number = numero ** 2;\n```\n\n```ts\nlet quadrado: number = Math.pow(numero, 2);\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01\n3\n7\n1\n4\n======== EXPECT\n3.61\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n1\n8.2\n-4\n12\n======== EXPECT\n6.28\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n3\n1\n3\n5\n======== EXPECT\n4.00\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n7\n3\n4\n-1\n======== EXPECT\n5.00\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n0\n0\n0\n0\n======== EXPECT\n0.00\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n47.88\n43.91\n34.8\n40.02\n======== EXPECT\n13.65\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
