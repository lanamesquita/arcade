{
    "title": "@c019recursividade: @c019recursividade",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@c019recursividade: @c019recursividade</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"c019recursividade\"><span class=\"citation\"\ndata-cites=\"c019recursividade\">@c019recursividade</span></h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<p><a\nhref=\"https://github.com/qxcodefup/arcade/blob/master/base/c019recursividade/.cache/draft.c\">C\u00f3digo</a></p>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode py\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> INSERT</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">========</span> EXPECT</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>O fatorial de <span class=\"dv\">5</span> \u00e9 <span class=\"fl\">120.</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> FINISH</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nO fatorial de 5 \u00e9 120.\n\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n\n// Agora, sobre recurs\u00e3o, precisamos ter muita calma e cuidado ao implementa-la.\n// A recurs\u00e3o permite que uma fun\u00e7\u00e3o se chame novamente dentro de si mesma, com uma condi\u00e7\u00e3o para interromper o ciclo.\n// No exemplo abaixo, a fun\u00e7\u00e3o `fatorial` calcula o fatorial de um n\u00famero.\n// Quando `n` \u00e9 0, a fun\u00e7\u00e3o simplesmente retorna 1, pois 0! (fatorial de 0) \u00e9 1.\n// Caso contr\u00e1rio, a fun\u00e7\u00e3o multiplica `n` pelo resultado de `fatorial(n-1)`,\n// chamando a si mesma at\u00e9 que `n` chegue a 0 e comece a voltar com os resultados das multiplica\u00e7\u00f5es.\n\n//DEL!\nint fatorial(int n) {\n    // Condi\u00e7\u00e3o de parada: quando `n` chega a 0, retornamos 1\n    if (n == 0) {\n        //Lembre que se cair nesse retorno, a fun\u00e7\u00e3o acaba aqui e o compilador n\u00e3o l\u00ea o que tem abaixo.\n        return 1;\n    }\n    // Caso contr\u00e1rio, multiplicamos `n` pelo resultado de `fatorial(n - 1)'\n    return n * fatorial(n - 1); // Empilha a chamada de `fatorial(n - 1)` e multiplica o valor de `n` por essa chamada ao desempilhar\n}\n// A fun\u00e7\u00e3o vai se chamando, empilhando chamadas dela mesmo e incrementando valor na variavel, mas quando o n chegar em 0, ela cai no primeiro caso e retorna 1.\n//ACT!\n// //TODO: corrija a fun\u00e7\u00e3o recursiva fatorial abaixo:\n// int fatorial(int n) {\n//     // Condi\u00e7\u00e3o de parada: quando `n` chega a 0, retornamos 1\n//     if (n == ???) {\n//         //Lembre que se cair nesse retorno, a fun\u00e7\u00e3o acaba aqui e o compilador n\u00e3o l\u00ea o que tem abaixo.\n//         return ???;\n//     }\n//     // Caso contr\u00e1rio, multiplicamos `n` pelo resultado de `fatorial(n - 1)', chamando a fun\u00e7\u00e3o novamente, dentro dela\n//     return n * ???(n - 1); // Empilha a chamada de `fatorial(n - 1)` e multiplica o valor de `n` por essa chamada ao desempilhar\n// }\n// // A fun\u00e7\u00e3o vai se chamando, empilhando chamadas dela mesmo e incrementando valor na variavel, mas quando o n chegar em 0, ela cai no primeiro caso e retorna 1.\n//ADD!\n\nint main() {\n    int numero = 5;\n    // Chamamos a fun\u00e7\u00e3o `fatorial` e armazenamos o resultado\n    int resultado = fatorial(numero);\n    printf(\"O fatorial de %d \u00e9 %d.\\n\", numero, resultado);\n\n    return 0;\n}\n",
                "encoding": 0
            }
        ]
    }
}
