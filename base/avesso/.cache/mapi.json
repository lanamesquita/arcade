{
    "title": "@avesso: Vetores e proximidade",
    "description": "# Vetores e proximidade\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/avesso/cover.jpg)\n\n## Motiva\u00e7\u00e3o\n\nA brincadeira do avesso funciona assim.\n\nTem um chefe e os oper\u00e1rios.  \nOs oper\u00e1rios ficam em fila.  \nO chefe diz o nome de um oper\u00e1rio e os dois oper\u00e1rios que estavam perto dele tem que trocar de posi\u00e7\u00e3o.  \nSe estavam em p\u00e9, ficam agachados e vice-versa.\n\n## A\u00e7\u00e3o\n\nSuponha a seguinte configura\u00e7\u00e3o onde cada n\u00famero  \nrepresenta uma pessoa.\n\n\\[3 4 8 9 1 5 6\\]\n\nO chefe grita \"4\", ent\u00e3o o \"3\" e o \"8\" se agacham.  \n\nO vetor fica assim:  \n\n\\[-3 4 -8 9 1 5 6\\]  \n\nUsando o sinal negativo para representar o agachado.\n\nDepois o chefe grita \"9\". O -8 e o 1 se alteram ficando assim:\n\n\\[-3 4 8 9 -1 5 6\\]  \n\nO 8 volta ao normal e o 1 se agacha.\n\nConsidere que nunca existem duas pessoas com o mesmo n\u00famero no vetor.\n\nSe o chefe disser um n\u00famero errado, ningu\u00e9m deve se mexer.\n\n### Entrada\n\n- a quantidade de casos de teste.\n- Para cada caso teste:  \n  - O tamanho do vetor de oper\u00e1rios (N < 100) e o grito do chefe (0 < X < 100).  \n  - O vetor de oper\u00e1rios, um valor inteiro para cada elemento  (0 < 100).\n\n## Sa\u00edda\n\n- Vetor resultante.  \n\n## Exemplos\n\n``` py\n>>>>>>>> INSERT\n1\n2 3\n3 1\n======== EXPECT\n[3 -1]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n1\n2 3\n2 1\n======== EXPECT\n[2 1]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n1\n2 1\n4 1\n======== EXPECT\n[-4 1]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n3\n3 1\n4 1 5\n3 5\n4 1 5\n3 4\n4 1 5\n======== EXPECT\n[-4 1 -5]\n[4 -1 5]\n[4 -1 5]\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n3\n7 0\n3 4 8 9 1 5 6\n7 4\n3 4 8 9 1 5 6\n7 9\n3 4 -8 9 1 5 6\n======== EXPECT\n[3 4 8 9 1 5 6]\n[-3 4 -8 9 1 5 6]\n[3 4 8 9 -1 5 6]\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n1\n2 3\n3 1\n======== EXPECT\n[3 -1]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1\n2 3\n2 1\n======== EXPECT\n[2 1]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n1\n2 1\n4 1\n======== EXPECT\n[-4 1]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3\n3 1\n4 1 5\n3 5\n4 1 5\n3 4\n4 1 5\n======== EXPECT\n[-4 1 -5]\n[4 -1 5]\n[4 -1 5]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3\n7 0\n3 4 8 9 1 5 6\n7 4\n3 4 8 9 1 5 6\n7 9\n3 4 -8 9 1 5 6\n======== EXPECT\n[3 4 8 9 1 5 6]\n[-3 4 -8 9 1 5 6]\n[3 4 8 9 -1 5 6]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
