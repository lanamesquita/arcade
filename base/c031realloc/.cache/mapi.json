{
    "title": "@c031realloc: @c031realloc",
    "description": "# @c031realloc\n\nDescri\u00e7\u00e3o no c\u00f3digo.\n\n[C\u00f3digo](https://github.com/qxcodefup/arcade/blob/master/base/c031realloc/.cache/draft.c)\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n======== EXPECT\nValores originais: 1 2 3 \nValores ap\u00f3s realloc: 1 2 3 4 5\n\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nValores originais: 1 2 3 \nValores ap\u00f3s realloc: 1 2 3 4 5\n\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n#include <stdlib.h>\n\n// A fun\u00e7\u00e3o `realloc` \u00e9 usada para redimensionar blocos de mem\u00f3ria previamente alocados:\n// - Preserva os dados existentes na mem\u00f3ria (at\u00e9 onde for poss\u00edvel).\n// - Pode mudar o endere\u00e7o do bloco se n\u00e3o houver espa\u00e7o cont\u00ednuo dispon\u00edvel.\n// - Recebe o ponteiro para o bloco original e o novo tamanho em bytes.\n\n// IMPORTANTE:\n// - Sempre verifique se o `realloc` retornou NULL antes de usar o novo ponteiro.\n// - Caso falhe, a mem\u00f3ria original n\u00e3o ser\u00e1 perdida, mas ser\u00e1 necess\u00e1rio trat\u00e1-la.\n\n// TODO: Aloque mem\u00f3ria para armazenar 3 inteiros usando `malloc`.\n// - Inicialize os valores: 1, 2, 3.\n// - Imprima os valores alocados.\n\n// TODO: Use `realloc` para redimensionar o bloco para armazenar 5 inteiros.\n// - Inicialize os novos valores: 4, 5.\n// - Imprima todos os valores ap\u00f3s o redimensionamento.\n\nint main() {\n    // Passo 1: Alocar mem\u00f3ria para 3 inteiros usando malloc\n    //DEL!\n    int* numeros = (int*)malloc(3 * sizeof(int));\n    if (numeros == NULL) {\n        printf(\"Erro ao alocar mem\u00f3ria.\\n\");\n        return 1;\n    }\n\n    // Inicializando os primeiros valores\n    numeros[0] = 1;\n    numeros[1] = 2;\n    numeros[2] = 3;\n\n    // Imprimindo os valores originais\n    printf(\"Valores originais: \");\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", numeros[i]);\n    }\n    printf(\"\\n\");\n\n    // Passo 2: Redimensionar o bloco de mem\u00f3ria para 5 inteiros\n    numeros = (int*)realloc(numeros, 5 * sizeof(int));\n    if (numeros == NULL) {\n        printf(\"Erro ao redimensionar mem\u00f3ria.\\n\");\n        return 1;\n    }\n\n    // Inicializando os novos valores\n    numeros[3] = 4;\n    numeros[4] = 5;\n\n    // Imprimindo todos os valores ap\u00f3s o redimensionamento\n    printf(\"Valores ap\u00f3s realloc: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", numeros[i]);\n    }\n    printf(\"\\n\");\n\n    // Passo 3: Liberar a mem\u00f3ria alocada\n    free(numeros);\n    //ACT!\n    // int* numeros = (int*)malloc(??? * sizeof(int));\n    // ???; // Inicializar valores\n    // numeros = (int*)realloc(???, ??? * sizeof(int));\n    // ???; // Imprimir valores\n    // free(???);\n    //ADD!\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
