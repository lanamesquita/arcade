{
    "title": "@c031realloc: @c031realloc",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@c031realloc: @c031realloc</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>@c031realloc</h1>\n<p>Descri\u00e7\u00e3o no c\u00f3digo.</p>\n<p><a href=\"https://github.com/qxcodefup/arcade/blob/master/base/c031realloc/.cache/draft.c\">C\u00f3digo</a></p>\n<h2>Testes</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"n\">Valores</span> <span class=\"n\">originais</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> \n<span class=\"n\">Valores</span> <span class=\"n\">ap\u00f3s</span> <span class=\"n\">realloc</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span>\n\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\nValores originais: 1 2 3 \nValores ap\u00f3s realloc: 1 2 3 4 5\n\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "c": [
            {
                "name": "main.c",
                "contents": "#include <stdio.h>\n#include <stdlib.h>\n\n// A fun\u00e7\u00e3o `realloc` \u00e9 usada para redimensionar blocos de mem\u00f3ria previamente alocados:\n// - Preserva os dados existentes na mem\u00f3ria (at\u00e9 onde for poss\u00edvel).\n// - Pode mudar o endere\u00e7o do bloco se n\u00e3o houver espa\u00e7o cont\u00ednuo dispon\u00edvel.\n// - Recebe o ponteiro para o bloco original e o novo tamanho em bytes.\n\n// IMPORTANTE:\n// - Sempre verifique se o `realloc` retornou NULL antes de usar o novo ponteiro.\n// - Caso falhe, a mem\u00f3ria original n\u00e3o ser\u00e1 perdida, mas ser\u00e1 necess\u00e1rio trat\u00e1-la.\n\n// TODO: Aloque mem\u00f3ria para armazenar 3 inteiros usando `malloc`.\n// - Inicialize os valores: 1, 2, 3.\n// - Imprima os valores alocados.\n\n// TODO: Use `realloc` para redimensionar o bloco para armazenar 5 inteiros.\n// - Inicialize os novos valores: 4, 5.\n// - Imprima todos os valores ap\u00f3s o redimensionamento.\n\nint main() {\n    // Passo 1: Alocar mem\u00f3ria para 3 inteiros usando malloc\n    //DEL!\n    int* numeros = (int*)malloc(3 * sizeof(int));\n    if (numeros == NULL) {\n        printf(\"Erro ao alocar mem\u00f3ria.\\n\");\n        return 1;\n    }\n\n    // Inicializando os primeiros valores\n    numeros[0] = 1;\n    numeros[1] = 2;\n    numeros[2] = 3;\n\n    // Imprimindo os valores originais\n    printf(\"Valores originais: \");\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d \", numeros[i]);\n    }\n    printf(\"\\n\");\n\n    // Passo 2: Redimensionar o bloco de mem\u00f3ria para 5 inteiros\n    numeros = (int*)realloc(numeros, 5 * sizeof(int));\n    if (numeros == NULL) {\n        printf(\"Erro ao redimensionar mem\u00f3ria.\\n\");\n        return 1;\n    }\n\n    // Inicializando os novos valores\n    numeros[3] = 4;\n    numeros[4] = 5;\n\n    // Imprimindo todos os valores ap\u00f3s o redimensionamento\n    printf(\"Valores ap\u00f3s realloc: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", numeros[i]);\n    }\n    printf(\"\\n\");\n\n    // Passo 3: Liberar a mem\u00f3ria alocada\n    free(numeros);\n    //ACT!\n    // int* numeros = (int*)malloc(??? * sizeof(int));\n    // ???; // Inicializar valores\n    // numeros = (int*)realloc(???, ??? * sizeof(int));\n    // ???; // Imprimir valores\n    // free(???);\n    //ADD!\n    return 0;\n}\n",
                "type": "show"
            }
        ]
    }
}
