{
    "title": "@vivo: Vivo ou Morto - OBI 2005",
    "description": "# Vivo ou Morto - OBI 2005\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/vivo/cover.jpg)\n\n## Motiva\u00e7\u00e3o\n\nToda crianc\u0327a certamente ja\u0301 brincou de \"vivo ou morto\u201d. A brincadeira e\u0301 dirigida por um \"chefe\u201d (um adulto), que comanda dois ou mais participantes (crianc\u0327as). A brincadeira e\u0301 composta de rodadas.\n\nNo in\u0131\u0301cio, os participantes sa\u0303o organizados pelo chefe em fila u\u0301nica. A cada rodada o chefe grita \"vivo\u201d ou \"morto\u201d e todos os participantes tentam seguir sua ordem, levantando-se ao ouvir a palavra \"vivo\u201d ou abaixando-se ao ouvir a palavra \"morto\u201d. Um participante que na\u0303o segue a ordem do chefe e\u0301 eliminado, deixando o seu lugar na fila.\n\nOs participantes remanescentes agrupam-se novamente em fila u\u0301nica, preenchendo as posic\u0327o\u0303es dos participantes eliminados, mas mantendo suas posic\u0327o\u0303es relativas. O jogo continua ate\u0301 que uma rodada seja composta por exatamente um participante. Tal participante e\u0301 dito o vencedor do jogo.\n\nPor exemplo, considere que a brincadeira inicie com cinco participantes, identificados por nu\u0301meros inteiros de 1 a 5, e que o chefe organize a fila na ordem 3 \u2192 2 \u2192 1 \u2192 4 \u2192 5. Se na primeira rodada forem eliminados os participantes 2 e 4, a fila da segunda rodada sera\u0301 formada por 3 \u2192 1 \u2192 5; se na segunda rodada for eliminado o participante 1, a fila da terceira rodada sera\u0301 formada por 3 \u2192 5. Se na terceira rodada o participante 3 for eliminado, o vencedor da brincadeira sera\u0301 o participante 5.  \n  \n## A\u00e7\u00e3o\n\nSua tarefa e\u0301 escrever um programa que determine o vencedor de uma partida de \"vivo ou morto\u201d, a partir da informac\u0327a\u0303o das ordens dadas pelo chefe e das ac\u0327o\u0303es executadas pelos participantes em cada rodada.  \n  \n### Entrada\n\n- A entrada e\u0301 constitu\u0131\u0301da de va\u0301rios casos de teste, cada um representando uma partida. A primeira linha de um caso de teste conte\u0301m dois nu\u0301meros inteiros P e R indicando respectivamente a quantidade inicial de participantes (2 \u2264 P \u2264 100) e quantidade de rodadas da partida (1 \u2264 R \u2264 100).\n- Os participantes sa\u0303o identificados por nu\u0301meros de 1 a P . A segunda linha de um caso de teste descreve a fila organizada pelo chefe, contendo P nu\u0301meros inteiros distintos x1 , x2 , . . . xP , onde x1 representa o identificador do participante no primeiro lugar na fila, x2 representa o identificador do participante no segundo lugar na fila, e assim por diante (1 \u2264 xi \u2264 P ).\n- Cada uma das R linhas seguintes representa uma rodada, contendo um nu\u0301mero inteiro inteiro N indicando o nu\u0301mero de participantes da rodada (2 \u2264 N \u2264 P ), um nu\u0301mero inteiro inteiro J representando a ordem dada pelo chefe (0 \u2264 J \u2264 1) e N nu\u0301meros inteiros Ai representando a ac\u0327a\u0303o do participante colocado na i-e\u0301sima posic\u0327a\u0303o na fila (0 \u2264 Ai \u2264 1).\n- Ordens e ac\u0327o\u0303es \"vivo\u201d sa\u0303o representadas pelo valor 1, ordens e ac\u0327o\u0303es \"morto\u201d pelo valor zero. Cada partida tem exatamente um vencedor, determinado somente na u\u0301ltima rodada fornecida no caso de teste correspondente. O final da entrada e\u0301 indicado por P = R = 0.\n- A entrada deve ser lida do dispositivo de entrada padra\u0303o (normalmente o teclado).  \n  \n## Sa\u00edda\n\n- Para cada caso de teste seu programa deve produzir tre\u0302s linhas. A primeira identifica o conjunto de teste no formato \"Teste n\u201d, onde n e\u0301 numerado a partir de 1. A segunda linha deve conter o identificador do vencedor. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Sa\u0131\u0301da, abaixo, deve ser seguida rigorosamente.  \n- A sa\u0131\u0301da deve ser escrita no dispositivo de sa\u0131\u0301da padra\u0303o (normalmente a tela).  \n  \n\fOlimp\u0131\u0301ada Brasileira de Informa\u0301tica - OBI2005 - Modalidade Programac\u0327a\u0303o N\u0131\u0301vel 2  \n  \n## Restri\u00e7\u00f5es\n\n```py\n2 \u2264 P \u2264 100 (P = 0 apenas para indicar o fim da entrada)  \n1 \u2264 R \u2264 100 (R = 0 apenas para indicar o fim da entrada)  \n1 \u2264 xi \u2264 P , para 1 \u2264 i \u2264 P  \n2\u2264N \u2264P  \n0\u2264J \u22641  \n0 \u2264 Ai \u2264 1, para 1 \u2264 i \u2264 N\n```\n\n## Exemplos\n\n``` py\n>>>>>>>> INSERT 01\n5 4\n3 2 1 4 5\n5 1 1 1 1 1 1\n5 0 0 1 0 1 0\n3 0 0 1 0\n2 1 0 1\n5 4\n3 2 1 4 5\n5 1 1 1 1 1 1\n5 0 0 1 0 1 0\n3 0 0 1 0\n2 1 1 0\n2 2\n2 1\n2 1 1 1\n2 1 1 0\n0 0\n======== EXPECT\nTeste 1\n5\nTeste 2\n3\nTeste 3\n2\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01\n5 4\n3 2 1 4 5\n5 1 1 1 1 1 1\n5 0 0 1 0 1 0\n3 0 0 1 0\n2 1 0 1\n5 4\n3 2 1 4 5\n5 1 1 1 1 1 1\n5 0 0 1 0 1 0\n3 0 0 1 0\n2 1 1 0\n2 2\n2 1\n2 1 1 1\n2 1 1 0\n0 0\n======== EXPECT\nTeste 1\n5\nTeste 2\n3\nTeste 3\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n10 7\n5 6 1 8 10 4 2 7 9 3\n10 1 1 1 0 1 1 1 1 1 1 1\n9 1 1 1 0 1 1 1 1 1 0\n7 1 0 0 1 1 1 1 1\n5 1 1 0 1 1 1\n4 1 1 1 1 1\n4 0 0 1 0 0\n3 1 1 0 0\n8 8\n6 2 3 4 8 1 5 7\n8 1 1 0 1 1 1 1 1 1\n7 1 1 1 1 1 1 1 1\n7 0 0 0 0 0 0 0 0\n7 1 1 1 1 1 1 1 1\n7 1 1 0 1 1 1 1 1\n6 1 1 1 0 0 1 1\n4 0 0 0 0 0\n4 1 0 0 0 1\n10 10\n3 5 1 7 4 8 2 9 10 6\n10 1 1 1 1 1 1 1 1 1 1 1\n10 0 0 0 0 0 0 0 1 0 0 0\n9 0 0 0 0 0 0 0 0 1 0\n8 1 1 1 1 1 1 0 0 1\n6 1 1 1 1 1 1 1\n6 0 0 0 0 1 0 0\n5 0 0 0 0 0 0\n5 0 1 0 0 0 0\n4 0 0 0 0 0\n4 1 0 1 0 0\n0 0\n======== EXPECT\nTeste 1\n10\nTeste 2\n7\nTeste 3\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n3 6\n1 2 3\n3 0 0 0 0\n3 0 0 0 0\n3 0 0 0 0\n3 1 0 1 1\n2 0 0 1\n1 0 0\n3 10\n3 1 2\n3 1 1 1 1\n3 0 0 0 1\n2 0 0 0\n2 0 0 0\n2 0 0 0\n2 0 0 0\n2 0 0 0\n2 1 0 1\n1 0 0\n1 0 0\n5 4\n5 2 3 4 1\n5 0 0 0 0 0 0\n5 1 1 1 1 1 0\n4 1 0 1 1 0\n2 0 1 0\n10 6\n1 8 4 3 5 6 10 2 7 9\n10 0 0 0 0 1 1 0 1 0 0 0\n7 1 1 1 0 1 0 0 1\n4 0 0 1 0 0\n3 1 1 1 1\n3 0 0 1 0\n2 0 1 0\n5 4\n3 5 4 2 1\n5 0 0 0 0 0 0\n5 1 0 1 1 0 1\n3 0 0 0 0\n3 0 0 1 1\n10 7\n10 3 6 8 2 9 1 4 7 5\n10 0 0 0 0 1 0 0 0 0 1 0\n8 0 0 0 0 1 0 0 0 0\n7 0 1 1 1 0 1 0 0\n3 1 0 0 1\n1 0 0\n1 0 0\n1 0 0\n8 3\n5 3 4 2 1 7 6 8\n8 0 0 0 0 0 1 0 0 0\n7 1 0 0 1 1 1 1 1\n5 0 1 1 1 0 1\n9 6\n4 6 7 8 2 9 1 3 5\n9 1 0 1 0 1 1 1 1 1 1\n7 1 1 1 1 1 1 1 1\n7 1 1 1 1 0 1 1 1\n6 0 1 0 1 0 0 0\n4 0 0 1 1 1\n1 1 1\n2 9\n2 1\n2 0 0 0\n2 0 0 0\n2 1 1 1\n2 0 0 0\n2 0 0 0\n2 1 1 1\n2 0 1 0\n1 1 1\n1 1 1\n8 6\n3 5 4 2 1 8 7 6\n8 1 1 1 1 1 1 1 1 1\n8 1 1 1 1 1 1 1 1 1\n8 1 0 1 0 1 1 0 0 1\n4 0 1 0 0 1\n2 0 0 1\n1 0 0\n0 0\n======== EXPECT\nTeste 1\n2\nTeste 2\n1\nTeste 3\n3\nTeste 4\n9\nTeste 5\n5\nTeste 6\n5\nTeste 7\n6\nTeste 8\n8\nTeste 9\n1\nTeste 10\n2\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
