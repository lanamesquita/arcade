{
    "title": "@vivo: Vivo ou Morto - OBI 2005",
    "description": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@vivo: Vivo ou Morto - OBI 2005</title>\n    <style>\n        body { font-family: sans-serif; line-height: 1.6; margin: 20px; }\n        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }\n        code { font-family: monospace; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n        /* Estilos b\u00e1sicos para o destaque de sintaxe (gerado pelo pygments via pymdownx.highlight) */\n        .highlight .hll { background-color: #ffffcc }\n        .highlight .c { color: #999988; font-style: italic } /* Comment */\n        .highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */\n        .highlight .k { color: #000000; font-weight: bold } /* Keyword */\n        .highlight .o { color: #000000; font-weight: bold } /* Operator */\n        .highlight .ch { color: #999988; font-style: italic } /* Comment.Hashbang */\n        .highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */\n        .highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\n        .highlight .cpf { color: #999988; font-style: italic } /* Comment.PreprocFile */\n        .highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */\n        .highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\n        .highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\n        .highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */\n        .highlight .gr { color: #aa0000 } /* Generic.Error */\n        .highlight .gh { color: #999999 } /* Generic.Heading */\n        .highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\n        .highlight .go { color: #888888 } /* Generic.Output */\n        .highlight .gp { color: #555555 } /* Generic.Prompt */\n        .highlight .gs { font-weight: bold } /* Generic.Strong */\n        .highlight .gu { color: #aaaaaa } /* Generic.Subheading */\n        .highlight .gt { color: #aa0000 } /* Generic.Traceback */\n        .highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */\n        .highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\n        .highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\n        .highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\n        .highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\n        .highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */\n        .highlight .m { color: #009999 } /* Literal.Number */\n        .highlight .s { color: #dd1144 } /* Literal.String */\n        .highlight .na { color: #008080 } /* Name.Attribute */\n        .highlight .nb { color: #0086B3 } /* Name.Builtin */\n        .highlight .nc { color: #445588; font-weight: bold } /* Name.Class */\n        .highlight .no { color: #008080 } /* Name.Constant */\n        .highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\n        .highlight .ni { color: #800080 } /* Name.Entity */\n        .highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */\n        .highlight .nf { color: #990000; font-weight: bold } /* Name.Function */\n        .highlight .nl { color: #990000; font-weight: bold } /* Name.Label */\n        .highlight .nn { color: #555555; font-weight: bold } /* Name.Namespace */\n        .highlight .nx { color: #990000; font-weight: bold } /* Name.Other */\n        .highlight .py { color: #009999 } /* Name.Property */\n        .highlight .p { color: #000000 } /* Name.Punctuation */\n        .highlight .nv { color: #008080 } /* Name.Variable */\n        .highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */\n        .highlight .w { color: #bbbbbb } /* Text.Whitespace */\n        .highlight .mf { color: #009999 } /* Literal.Number.Float */\n        .highlight .mh { color: #009999 } /* Literal.Number.Hex */\n        .highlight .mi { color: #009999 } /* Literal.Number.Integer */\n        .highlight .mo { color: #009999 } /* Literal.Number.Oct */\n        .highlight .sb { color: #dd1144 } /* Literal.String.Backtick */\n        .highlight .sc { color: #dd1144 } /* Literal.String.Char */\n        .highlight .sd { color: #dd1144 } /* Literal.String.Doc */\n        .highlight .s2 { color: #dd1144 } /* Literal.String.Double */\n        .highlight .se { color: #dd1144 } /* Literal.String.Escape */\n        .highlight .sh { color: #dd1144 } /* Literal.String.Heredoc */\n        .highlight .si { color: #dd1144 } /* Literal.String.Interpol */\n        .highlight .sx { color: #dd1144 } /* Literal.String.Other */\n        .highlight .sr { color: #009926 } /* Literal.String.Regex */\n        .highlight .s1 { color: #dd1144 } /* Literal.String.Single */\n        .highlight .ss { color: #dd1144 } /* Literal.String.Symbol */\n        .highlight .bp { color: #0086B3 } /* Name.Builtin.Pseudo */\n        .highlight .vc { color: #008080 } /* Name.Variable.Class */\n        .highlight .vg { color: #008080 } /* Name.Variable.Global */\n        .highlight .vi { color: #008080 } /* Name.Variable.Instance */\n        .highlight .il { color: #009999 } /* Literal.Number.Integer.Long */\n    </style>\n    <script type=\"text/javascript\" async\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">\n    </script>\n</head>\n<body>\n<h1>Vivo ou Morto - OBI 2005</h1>\n<p><img alt=\"_\" src=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/vivo/cover.jpg\" /></p>\n<h2>Motiva\u00e7\u00e3o</h2>\n<p>Toda crianc\u0327a certamente ja\u0301 brincou de \"vivo ou morto\u201d. A brincadeira e\u0301 dirigida por um \"chefe\u201d (um adulto), que comanda dois ou mais participantes (crianc\u0327as). A brincadeira e\u0301 composta de rodadas.</p>\n<p>No in\u0131\u0301cio, os participantes sa\u0303o organizados pelo chefe em fila u\u0301nica. A cada rodada o chefe grita \"vivo\u201d ou \"morto\u201d e todos os participantes tentam seguir sua ordem, levantando-se ao ouvir a palavra \"vivo\u201d ou abaixando-se ao ouvir a palavra \"morto\u201d. Um participante que na\u0303o segue a ordem do chefe e\u0301 eliminado, deixando o seu lugar na fila.</p>\n<p>Os participantes remanescentes agrupam-se novamente em fila u\u0301nica, preenchendo as posic\u0327o\u0303es dos participantes eliminados, mas mantendo suas posic\u0327o\u0303es relativas. O jogo continua ate\u0301 que uma rodada seja composta por exatamente um participante. Tal participante e\u0301 dito o vencedor do jogo.</p>\n<p>Por exemplo, considere que a brincadeira inicie com cinco participantes, identificados por nu\u0301meros inteiros de 1 a 5, e que o chefe organize a fila na ordem 3 \u2192 2 \u2192 1 \u2192 4 \u2192 5. Se na primeira rodada forem eliminados os participantes 2 e 4, a fila da segunda rodada sera\u0301 formada por 3 \u2192 1 \u2192 5; se na segunda rodada for eliminado o participante 1, a fila da terceira rodada sera\u0301 formada por 3 \u2192 5. Se na terceira rodada o participante 3 for eliminado, o vencedor da brincadeira sera\u0301 o participante 5.  </p>\n<h2>A\u00e7\u00e3o</h2>\n<p>Sua tarefa e\u0301 escrever um programa que determine o vencedor de uma partida de \"vivo ou morto\u201d, a partir da informac\u0327a\u0303o das ordens dadas pelo chefe e das ac\u0327o\u0303es executadas pelos participantes em cada rodada.  </p>\n<h3>Entrada</h3>\n<ul>\n<li>A entrada e\u0301 constitu\u0131\u0301da de va\u0301rios casos de teste, cada um representando uma partida. A primeira linha de um caso de teste conte\u0301m dois nu\u0301meros inteiros P e R indicando respectivamente a quantidade inicial de participantes (2 \u2264 P \u2264 100) e quantidade de rodadas da partida (1 \u2264 R \u2264 100).</li>\n<li>Os participantes sa\u0303o identificados por nu\u0301meros de 1 a P . A segunda linha de um caso de teste descreve a fila organizada pelo chefe, contendo P nu\u0301meros inteiros distintos x1 , x2 , . . . xP , onde x1 representa o identificador do participante no primeiro lugar na fila, x2 representa o identificador do participante no segundo lugar na fila, e assim por diante (1 \u2264 xi \u2264 P ).</li>\n<li>Cada uma das R linhas seguintes representa uma rodada, contendo um nu\u0301mero inteiro inteiro N indicando o nu\u0301mero de participantes da rodada (2 \u2264 N \u2264 P ), um nu\u0301mero inteiro inteiro J representando a ordem dada pelo chefe (0 \u2264 J \u2264 1) e N nu\u0301meros inteiros Ai representando a ac\u0327a\u0303o do participante colocado na i-e\u0301sima posic\u0327a\u0303o na fila (0 \u2264 Ai \u2264 1).</li>\n<li>Ordens e ac\u0327o\u0303es \"vivo\u201d sa\u0303o representadas pelo valor 1, ordens e ac\u0327o\u0303es \"morto\u201d pelo valor zero. Cada partida tem exatamente um vencedor, determinado somente na u\u0301ltima rodada fornecida no caso de teste correspondente. O final da entrada e\u0301 indicado por P = R = 0.</li>\n<li>A entrada deve ser lida do dispositivo de entrada padra\u0303o (normalmente o teclado).  </li>\n</ul>\n<h2>Sa\u00edda</h2>\n<ul>\n<li>Para cada caso de teste seu programa deve produzir tre\u0302s linhas. A primeira identifica o conjunto de teste no formato \"Teste n\u201d, onde n e\u0301 numerado a partir de 1. A segunda linha deve conter o identificador do vencedor. A terceira linha deve ser deixada em branco. A grafia mostrada no Exemplo de Sa\u0131\u0301da, abaixo, deve ser seguida rigorosamente.  </li>\n<li>A sa\u0131\u0301da deve ser escrita no dispositivo de sa\u0131\u0301da padra\u0303o (normalmente a tela).  </li>\n</ul>\n<p>Olimp\u0131\u0301ada Brasileira de Informa\u0301tica - OBI2005 - Modalidade Programac\u0327a\u0303o N\u0131\u0301vel 2  </p>\n<h2>Restri\u00e7\u00f5es</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"err\">\u2264</span> <span class=\"n\">P</span> <span class=\"err\">\u2264</span> <span class=\"mi\">100</span> <span class=\"p\">(</span><span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"n\">apenas</span> <span class=\"n\">para</span> <span class=\"n\">indicar</span> <span class=\"n\">o</span> <span class=\"n\">fim</span> <span class=\"n\">da</span> <span class=\"n\">entrada</span><span class=\"p\">)</span>  \n<span class=\"mi\">1</span> <span class=\"err\">\u2264</span> <span class=\"n\">R</span> <span class=\"err\">\u2264</span> <span class=\"mi\">100</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"n\">apenas</span> <span class=\"n\">para</span> <span class=\"n\">indicar</span> <span class=\"n\">o</span> <span class=\"n\">fim</span> <span class=\"n\">da</span> <span class=\"n\">entrada</span><span class=\"p\">)</span>  \n<span class=\"mi\">1</span> <span class=\"err\">\u2264</span> <span class=\"n\">xi</span> <span class=\"err\">\u2264</span> <span class=\"n\">P</span> <span class=\"p\">,</span> <span class=\"n\">para</span> <span class=\"mi\">1</span> <span class=\"err\">\u2264</span> <span class=\"n\">i</span> <span class=\"err\">\u2264</span> <span class=\"n\">P</span>  \n<span class=\"mi\">2</span><span class=\"err\">\u2264</span><span class=\"n\">N</span> <span class=\"err\">\u2264</span><span class=\"n\">P</span>  \n<span class=\"mi\">0</span><span class=\"err\">\u2264</span><span class=\"n\">J</span> <span class=\"err\">\u2264</span><span class=\"mi\">1</span>  \n<span class=\"mi\">0</span> <span class=\"err\">\u2264</span> <span class=\"n\">Ai</span> <span class=\"err\">\u2264</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">para</span> <span class=\"mi\">1</span> <span class=\"err\">\u2264</span> <span class=\"n\">i</span> <span class=\"err\">\u2264</span> <span class=\"n\">N</span>\n</code></pre></div>\n<h2>Exemplos</h2>\n<div class=\"language-py highlight\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">INSERT</span> <span class=\"mi\">01</span>\n<span class=\"mi\">5</span> <span class=\"mi\">4</span>\n<span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span>\n<span class=\"mi\">5</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n<span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n<span class=\"mi\">5</span> <span class=\"mi\">4</span>\n<span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span>\n<span class=\"mi\">5</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n<span class=\"mi\">5</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"mi\">3</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"mi\">2</span> <span class=\"mi\">2</span>\n<span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span>\n<span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n<span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"o\">========</span> <span class=\"n\">EXPECT</span>\n<span class=\"n\">Teste</span> <span class=\"mi\">1</span>\n<span class=\"mi\">5</span>\n<span class=\"n\">Teste</span> <span class=\"mi\">2</span>\n<span class=\"mi\">3</span>\n<span class=\"n\">Teste</span> <span class=\"mi\">3</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">FINISH</span>\n</code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT 01\n5 4\n3 2 1 4 5\n5 1 1 1 1 1 1\n5 0 0 1 0 1 0\n3 0 0 1 0\n2 1 0 1\n5 4\n3 2 1 4 5\n5 1 1 1 1 1 1\n5 0 0 1 0 1 0\n3 0 0 1 0\n2 1 1 0\n2 2\n2 1\n2 1 1 1\n2 1 1 0\n0 0\n======== EXPECT\nTeste 1\n5\nTeste 2\n3\nTeste 3\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n10 7\n5 6 1 8 10 4 2 7 9 3\n10 1 1 1 0 1 1 1 1 1 1 1\n9 1 1 1 0 1 1 1 1 1 0\n7 1 0 0 1 1 1 1 1\n5 1 1 0 1 1 1\n4 1 1 1 1 1\n4 0 0 1 0 0\n3 1 1 0 0\n8 8\n6 2 3 4 8 1 5 7\n8 1 1 0 1 1 1 1 1 1\n7 1 1 1 1 1 1 1 1\n7 0 0 0 0 0 0 0 0\n7 1 1 1 1 1 1 1 1\n7 1 1 0 1 1 1 1 1\n6 1 1 1 0 0 1 1\n4 0 0 0 0 0\n4 1 0 0 0 1\n10 10\n3 5 1 7 4 8 2 9 10 6\n10 1 1 1 1 1 1 1 1 1 1 1\n10 0 0 0 0 0 0 0 1 0 0 0\n9 0 0 0 0 0 0 0 0 1 0\n8 1 1 1 1 1 1 0 0 1\n6 1 1 1 1 1 1 1\n6 0 0 0 0 1 0 0\n5 0 0 0 0 0 0\n5 0 1 0 0 0 0\n4 0 0 0 0 0\n4 1 0 1 0 0\n0 0\n======== EXPECT\nTeste 1\n10\nTeste 2\n7\nTeste 3\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n3 6\n1 2 3\n3 0 0 0 0\n3 0 0 0 0\n3 0 0 0 0\n3 1 0 1 1\n2 0 0 1\n1 0 0\n3 10\n3 1 2\n3 1 1 1 1\n3 0 0 0 1\n2 0 0 0\n2 0 0 0\n2 0 0 0\n2 0 0 0\n2 0 0 0\n2 1 0 1\n1 0 0\n1 0 0\n5 4\n5 2 3 4 1\n5 0 0 0 0 0 0\n5 1 1 1 1 1 0\n4 1 0 1 1 0\n2 0 1 0\n10 6\n1 8 4 3 5 6 10 2 7 9\n10 0 0 0 0 1 1 0 1 0 0 0\n7 1 1 1 0 1 0 0 1\n4 0 0 1 0 0\n3 1 1 1 1\n3 0 0 1 0\n2 0 1 0\n5 4\n3 5 4 2 1\n5 0 0 0 0 0 0\n5 1 0 1 1 0 1\n3 0 0 0 0\n3 0 0 1 1\n10 7\n10 3 6 8 2 9 1 4 7 5\n10 0 0 0 0 1 0 0 0 0 1 0\n8 0 0 0 0 1 0 0 0 0\n7 0 1 1 1 0 1 0 0\n3 1 0 0 1\n1 0 0\n1 0 0\n1 0 0\n8 3\n5 3 4 2 1 7 6 8\n8 0 0 0 0 0 1 0 0 0\n7 1 0 0 1 1 1 1 1\n5 0 1 1 1 0 1\n9 6\n4 6 7 8 2 9 1 3 5\n9 1 0 1 0 1 1 1 1 1 1\n7 1 1 1 1 1 1 1 1\n7 1 1 1 1 0 1 1 1\n6 0 1 0 1 0 0 0\n4 0 0 1 1 1\n1 1 1\n2 9\n2 1\n2 0 0 0\n2 0 0 0\n2 1 1 1\n2 0 0 0\n2 0 0 0\n2 1 1 1\n2 0 1 0\n1 1 1\n1 1 1\n8 6\n3 5 4 2 1 8 7 6\n8 1 1 1 1 1 1 1 1 1\n8 1 1 1 1 1 1 1 1 1\n8 1 0 1 0 1 1 0 0 1\n4 0 1 0 0 1\n2 0 0 1\n1 0 0\n0 0\n======== EXPECT\nTeste 1\n2\nTeste 2\n1\nTeste 3\n3\nTeste 4\n9\nTeste 5\n5\nTeste 6\n5\nTeste 7\n6\nTeste 8\n8\nTeste 9\n1\nTeste 10\n2\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
