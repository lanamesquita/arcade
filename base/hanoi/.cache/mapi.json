{
    "title": "@hanoi: Torres de Hanoi",
    "description": "# Torres de Hanoi\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/hanoi/cover.jpg)\n\n## Motiva\u00e7\u00e3o\n\nO objetivo do jogo das torres de hanoi \u00e9 mover todos os discos da torre inicial para a torre final, sem colocar disco maior sobre disco menor. Inicialmente, a torre final e a torre auxiliar est\u00e3o vazias. Voc\u00ea pode usar a torre auxiliar para lhe ajudar a mover os discos.\n\n## Exemplo\n\n```py\n      ++                  ++                 ++\n      ||                  ||                 ||\n      ||                  ||                 ||\n      ||                  ||                 ||\n      ||                  ||                 ||\n    +-++-+                ||                 ||\n    |    |                ||                 ||\n  +-+----+-+              ||                 ||\n  |        |              ||                 ||\n+-+--------+-+            ||                 ||\n|            |            ||                 ||\n+------------+            ++                 ++\nTorre inicial        Torre auxiliar      Torre final\n      A                   B                  C\n\nSolu\u00e7\u00e3o:\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\n\n```\n\nSimule as jogadas em [JOGO](http://www.dynamicdrive.com/dynamicindex12/towerhanoi.htm)\n\nEste problema parece dif\u00edcil de resolver para o caso geral com _n_ discos. Por\u00e9m, como acontece em v\u00e1rios problemas, utilizando recurs\u00e3o chegamos em um algoritmo simples e elegante. Mova recursivamente os \\\\(n-1\\\\) primeiros discos para a torre auxiliar, depois mova o \u00faltimo disco da torre inicial para a torre final, e ent\u00e3o mova recursivamente os \\\\(n-1\\\\) discos da torre auxiliar para a torre final.\n\n### Entrada\n\n- N\u00famero de discos para mover da torre 'A' para a torre 'C'.\n\n## Sa\u00edda\n\n- Sequ\u00eancia de movimentos para mover todos os discos (um movimento por linha).\n- Nota\u00e7\u00e3o do movimento do disco no topo da torre\n  - torre de origem -> torre de destino.\n\n## Exemplos\n\n``` py\n>>>>>>>> INSERT\n3\n======== EXPECT\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\n<<<<<<<< FINISH\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n3\n======== EXPECT\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n5\n======== EXPECT\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\nA -> B\nC -> B\nC -> A\nB -> A\nC -> B\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\nB -> A\nC -> B\nC -> A\nB -> A\nB -> C\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
