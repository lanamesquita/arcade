{
    "title": "@pedra: Pedra na lua",
    "description": "# Pedra na lua\n\n![_](https://raw.githubusercontent.com/qxcodefup/arcade/master/base/pedra/cover.jpg)\n\n## Contexto\n\nEm uma competi\u00e7\u00e3o interplanet\u00e1ria de arremesso de pedras na lua, os competidores devem demonstrar precis\u00e3o e for\u00e7a. Cada participante possui duas pedras:\n\n- A **pedra A** e a **pedra B**.\n- Para ser considerado um lan\u00e7amento v\u00e1lido, ambas as pedras devem alcan\u00e7ar pelo menos 10 metros.\n- Se alguma das pedras ficar abaixo dessa marca, o competidor ser\u00e1 desclassificado.\n- A pontua\u00e7\u00e3o de cada competidor \u00e9 a diferen\u00e7a absoluta entre as dist\u00e2ncias das duas pedras. **Quanto menor a diferen\u00e7a, melhor a pontua\u00e7\u00e3o**.\n- O competidor com a menor pontua\u00e7\u00e3o vence.\n- Em caso de empate na pontua\u00e7\u00e3o, vence o competidor com o menor \u00edndice (ordem de entrada).\n- Se todos os competidores forem desclassificados, **n\u00e3o haver\u00e1 ganhador**.\n\nVoc\u00ea deve escrever um programa que identifique o competidor vencedor.\n\n### Entrada\n\n- **1\u00aa linha:** Um n\u00famero inteiro **'N'** (1 \u2264 N \u2264 100), representando o n\u00famero de competidores.\n- **Pr\u00f3ximas 'N' linhas:** Cada linha cont\u00e9m dois n\u00fameros inteiros **A** e **B** (1 \u2264 A, B \u2264 100), que indicam a dist\u00e2ncia das pedras **A** e **B** lan\u00e7adas por cada competidor.\n\n### Saida\n\n- Imprima o \u00edndice **(come\u00e7ando em 0)** do competidor vencedor.\n- Caso todos os competidores sejam desclassificados, imprima **\"sem ganhador\"**.\n\n### Restri\u00e7\u00f5es\n\n- Cada competidor arremessa duas pedras, cujas dist\u00e2ncias est\u00e3o entre **1** e **100 metros**.\n- Todos os competidores que lan\u00e7arem **qualquer** pedra a **menos de 10 metros** s\u00e3o automaticamente **desclassificados**.\n\n## Testes\n\n```py\n>>>>>>>> INSERT\n2\n8 11\n10 15\n======== EXPECT\n1\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n3\n9 12\n11 13\n10 11\n======== EXPECT\n2\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n3\n12 15\n16 14\n10 9\n======== EXPECT\n1\n<<<<<<<< FINISH\n```\n\n```py\n>>>>>>>> INSERT\n4\n12 15\n20 23\n10 9\n35 35\n======== EXPECT\n3\n<<<<<<<< FINISH\n```\n\n### Dicas\n\n- Utilize a fun\u00e7\u00e3o `abs()` para calcular a diferen\u00e7a absoluta entre as dist\u00e2ncias das pedras A e B.\n- Para resolver o problema de desclassifica\u00e7\u00e3o, verifique se ambos os arremessos s\u00e3o **maiores ou iguais a 10 metros**.\n- Caso m\u00faltiplos competidores tenham a mesma pontua\u00e7\u00e3o, escolha aquele que tiver o **menor \u00edndice**.\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n2\n8 11\n10 15\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3\n9 12\n11 13\n10 11\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3\n12 15\n16 14\n10 9\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4\n12 15\n20 23\n10 9\n35 35\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 04\n2\n10 8\n9 13\n======== EXPECT\nsem ganhador\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 05\n2\n8 9\n12 7\n======== EXPECT\nsem ganhador\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 06\n2\n10 9\n15 19\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 07\n3\n12 17\n14 11\n8 9\n======== EXPECT\n1\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 08\n3\n9 12\n11 13\n12 13\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 09\n4\n9 8\n9 12\n12 9\n6 7\n======== EXPECT\nsem ganhador\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 10\n4\n9 8\n9 12\n12 15\n6 7\n======== EXPECT\n2\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 11\n4\n9 8\n9 12\n12 15\n18 19\n======== EXPECT\n3\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {}
}
